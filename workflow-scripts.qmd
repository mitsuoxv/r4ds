# ワークフロー：スクリプトとプロジェクト {#sec-workflow-scripts-projects}

```{r}
#| echo: false

source("_common.R")
```

本章では、コードを整頓するのに欠かせない2つの道具、スクリプトとプロジェクトを紹介します。

## スクリプト

ここまでは、コードを実行するのにコンソールを使ってきました。
そこからはじめるのは良いのですが、より複雑なggplot2のグラフやより長いdplyrのパイプラインを作るにつれて、たちまち手狭に感じるようになります。
作業余地を広げるために、スクリプト・エディタを使いましょう。
Fileメニューをクリック、New Fileを選んで、その中からR scriptとするか、キーボード・ショートカット Cmd/Ctrl + Shift + N を使って、スクリプト・エディタをオープンします。
@fig-rstudio-script のように、区画が4つになります。
スクリプト・エディタはコードで実験するのに向いています。
コードのどこかを変えたい場合、全体を打ち直す必要はなく、スクリプトを編集して再実行するだけで済みます。
それに、コードがきちんと機能して、やりたいことができたなら、スクリプト・ファイルとして保存すれば、後から容易に戻ってくることができます。

```{r}
#| label: fig-rstudio-script
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   スクリプト・エディタを開くと、IDEの左上に新しい区画が増える。
#| fig-alt: |
#|   エディタ、コンソール、出力の区画がハイライトされたRStudio IDE。
knitr::include_graphics("diagrams/rstudio/script.png", dpi = 270)
```

### コードの実行

スクリプト・エディタは、複雑なggplot2のプロットやdplyr操作の長い連鎖を構築できる、素晴らしい場所です。
スクリプト・エディタを効率的に使いこなす鍵は、最も重要なキーボード・ショートカット Cmd/Ctrl + Enter を記憶することです。
これで、現下のRの表現式をコンソールで実行します。
例えば、以下のコードを見てみましょう。

```{r}
#| eval: false

library(dplyr)
library(nycflights13)

not_cancelled <- flights |> 
  filter(!is.na(dep_delay)█, !is.na(arr_delay))

not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay))
```

カーソルが█にあるときに、Cmd/Ctrl + Enter を押すと、そこのコマンド全体を実行して、`not_cancelled`を生成します。
また、カーソルは (`not_cancelled |>`ではじまる) 次の文に移動します。
そのおかげで、Cmd/Ctrl + Enter を繰り返し押して、スクリプト全体を表現式ごとに実行していくことが簡単になっています。

コードを表現式ごとに実行する替わりに、Cmd/Ctrl + Shift + S とすれば、スクリプト全体を一発で実行することもできます。
これをつどつど行うことで、スクリプト内のコードの全ての重要な部分を忘れずに取り込むことができます。

スクリプトは必要なパッケージからはじめることをお薦めします。
そうすることで、他の人とコードを共有する際、インストールが必要なパッケージが何かすぐに分かります。
ただ、共有するスクリプトには`install.packages()`は決して含めないでください。
他の人が不注意だとコンピュータをいじってしまうようなスクリプトを放つことは、思いやりに欠けます！

今後の章から、スクリプト・エディタを使いはじめ、キーボード・ショートカットを練習するよう是非にもお薦めします。
しばらくすれば、このやり方でコードをコンソールに送ることがごく自然になり、意識することもなくなるでしょう。

### RStudioによる診断

スクリプト・エディタでは、RStudioは文法エラーを見つけると、赤い波線とサイドバーのバッテンマークでハイライトします。

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   x y <- 10と書かれたスクリプト・エディタ。赤いバッテンマークが
#|   文法エラーがあることを表す。文法エラーは赤い波線でもハイライトされる。

knitr::include_graphics("screenshots/rstudio-diagnostic.png")
```

バッテンマークの上にカーソルを置くと、何が問題か表示されます。

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   x y <- 10と書かれたスクリプト・エディタ。赤いバッテンマークが
#|   文法エラーがあることを表す。文法エラーは赤い波線でもハイライトされる。
#|   バッテンマークの上にカーソルを置くと、テキスト・ボックスが現れ、
#|   unexpected token y と unexpected token <- と表示される。

knitr::include_graphics("screenshots/rstudio-diagnostic-tip.png")
```

RStudioはまた、潜在的な問題についても教えてくれます。

```{r}
#| echo: false
#| out-width: ~
#| fig-alt: |
#|   3 == NA と書かれたスクリプト・エディタ。黄色のビックリマークは、
#|   潜在的な問題を表す。ビックリマークの上にカーソルを置くと、
#|   テキスト・ボックスが現れ、use is.na to check 
#|   whether expression evaluates to NA と表示される。

knitr::include_graphics("screenshots/rstudio-diagnostic-warn.png")
```

### 保存と名付け方

RStudioは自動的にスクリプト・エディタの内容を終了時に保存して、自動的に再開時に元のようにしてくれます。
けれども、Untitled1、Untitled2、Untitled3などとせずに、スクリプトに分かりやすい名前を付けて保存することをお薦めします。

ファイルに`code.R`とか`myscript.R`とか名前を付けたくなるかもしれませんが、先々楽ができるよう、名前を選択する前に今少しよく考えるべきです。
ファイルの名付け方の3つの重要な原則は、以下の通りです。

1.  **機械**が読めるファイル名にすべし。スペース、シンボル、特殊文字を使わない。ファイルの区別するのに、大文字小文字の違いに頼るな。
2.  **人間**が読めるファイル名にすべし。ファイルの中身が何か分かるファイル名を使え。
3.  デフォルトの順番付けと馴染むファイル名にすべし。アルファベット順に並ぶとバラバラになるのなら、ファイル名の頭に数字を付けて望む順に並ぶようにせよ。

例えば、プロジェクトのフォルダに以下のファイルがあるとします。

```         
alternative model.R
code for exploratory analysis.r
finalreport.qmd
FinalReport.qmd
fig 1.png
Figure_02.png
model_first_try.R
run-first.r
temp.txt
```

ここには、複数の問題があります。ど
のファイルを最初に実行すべきか見つけ出すのが大変、ファイル名にスペースが入っている、同名で大文字小文字だけが違うファイルが2つある (`finalreport` 対 `FinalReport` [^workflow-scripts-1]) 、そして、中身が分からない名前 (`run-first`と`temp`) がいくつかある。

[^workflow-scripts-1]: そもそもファイル名に"final"なんて使うのは命知らずの所業😆です。P
    iled Higher and Deeper のコミックに、[それに関する愉快な一片](https://phdcomics.com/comics/archive.php?comicid=1531)が載っています。

以下が、同じファイル群のより良い名付け方と整頓法です。

```         
01-load-data.R
02-exploratory-analysis.R
03-model-approach-1.R
04-model-approach-2.R
fig-01.png
fig-02.png
report-2022-03-20.qmd
report-2022-04-02.qmd
report-draft-notes.txt
```

重要なスクリプトに番号を付けておけば、どの順に実行すべきか明白になり、首尾一貫した名付け法によりどこが違うのか見やすくなります。
さらに、図には似た名前を付け、報告書のファイル名には日付を入れて区別、`temp`は`report-draft-notes`に名前を変えて中身が分かりやすくしています。
ディレクトリ内にたくさんファイルがある場合、もう一段整頓を進めて、異なるファイル・タイプ (スクリプトや図など) ごとにディレクトリを分けることをお薦めします。

## プロジェクト

ある日、Rを停止して、何か他のことをしに出掛けて、それから分析に戻らなければいけない。
ある日、複数の分析を同時並行で行っていて、混じらないよう別々に保っておきたい。
ある日、外界からデータをRに持ち込んで、計算結果と図をRから外界へ戻さなければならない。

こうした実生活での状況に対処するためには、2つのことを決めなければなりません。

1.  あなたの真実を担保するものは何か？
    何が起きたのか後々の記録として、何を保存する？

2.  あなたの分析の居場所はどこか？

### あなたの真実を担保するものは何か？

分析中に作成した全てのオブジェクトを含む現在の"環境 (Environment)"に頼ることは、初心者としては構いません。
しかし、より大規模なプロジェクトに取り組んだり、他者と協力したりするには、あなたの真実を担保するものはRスクリプトでなければなりません。
Rスクリプト (とデータ・ファイル) があれば、環境を再現できます。
環境だけから、Rスクリプトを再現するのはずっと困難です。記
憶から多数のコードを思い出して打ち込み直す (その過程で、間違いを犯すことは避けられません) か、注意深くRヒストリーを掘り出すかしなければならないでしょう。

Rスクリプトをあなた分析の真実性を担保するものとする助けとして、セッション間でワークスペースを保持しないようRStudioに指示することを強くお薦めします。
`usethis::use_blank_slate()` [^workflow-scripts-2] を実行するか、@fig-blank-slate で囲った箇所のオプションを同様に設定すると、そうできます。
こうするこで、RStudioは再起動のたびに、前回実行したコードも、作成したオブジェクトも、使用するため読み込んだデータセットも、忘れてしまいます。
短期的には苦痛に感じるかもしれませんが、長期的には苦悩からは解放されたのです。
今や全ての重要な手順をコードに取り込まざるをえなくなったのですから。
環境内の重要な計算結果だけを保存していて、コード内の計算自体を保存し忘れていたことに、3カ月後に気付くことほど悪いことはありません。

[^workflow-scripts-2]: usethisパッケージをまだインストールしていないのなら、`install.packages("usethis")`でインストールできます。

```{r}
#| label: fig-blank-slate
#| echo: false
#| fig-cap: |
#|   RStudioセッションを常に白紙状態からはじめるには、
#|   RStudioオプションをこのように設定すること。
#| fig-alt: |
#|   RStudioのGlobal Optionsのウィンドウ。
#|   Restore .RData into workspace at startup
#|   のオプションはチェックがはずれている。
#|   また、Save workspace to .RData on exit
#|   のオプションはNeverに設定されている。
#| out-width: ~

knitr::include_graphics("diagrams/rstudio/clean-slate.png", dpi = 270)
```

エディタ内にコードの重要な部分を確実に取り込むために役立つ、大切なキーボード・ショートカットのペアがあります。

1.  Cmd/Ctrl + Shift + 0/F10 でRを再起動。
2.  Cmd/Ctrl + Shift + S で現在のスクリプトを再実行。

私たちは合わせると週に何百回もこのパターンを使っています。

キーボード・ショートカットを使わないなら、SessionメニューからRestart Rを選択、それから現在のスクリプトを選んで右上のSourceをクリック、でもできます。

::: callout-note
## RStudio server

RStudio serverを使っている場合は、デフォルトでRセッションを白紙状態からはじめることはできません。
RStudio serverのタブを閉じると、Rを終了したと感じるかもしれませんが、実際にはserverのバックグラウンドで実行が続いています。
次回戻ってくると、前回閉じたのと全く同じ場所に戻ってきます。
そのため、RStudio serverを使う場合はなおさら、白紙状態からはじめるために、定期的にRを再起動させることが大事です。
:::

### あなたの分析の居場所はどこか？

Rには**ワーキング・ディレクトリ**という強力な概念があります。
そこはRが、ファイルをロードするよう頼まれるとそれを探す場所であり、ファイルを保存するよう頼まれるとそこに置く場所です。
RStudioではコンソールの上部に、現在のワーキング・ディレクトリが表示されます。

```{r}
#| echo: false
#| fig-alt: |
#|   コンソールのタブに現在のワーキング・ディレクトリ
#|   ~/Documents/r4ds が表示されている。
#| out-width: ~
knitr::include_graphics("screenshots/rstudio-wd.png")
```

Rコードの中で`getwd()`と実行すれば、ワーキング・ディレクトリをプリントできます。

```{r}
#| eval: false
getwd()
#> [1] "/Users/hadley/Documents/r4ds"
```

このRセッションでは、現在のワーキング・ディレクトリ ("ホーム"と考えましょう) は、hadleyのDocumentsフォルダの中のr4dsというサブフォルダにあります。
あなたがこのコードは実行すると異なる結果になるでしょう。あ
なたのコンピュータは、Hadleyのものとはディレクトリ構成が違っているでしょうから！

初心者のRユーザなら、ワーキング・ディレクトリを、あなたのコンピュータ上のホーム・ディレクトリにしても、documentsディレクトリにしても、その他のどこにしても構いません。
しかし、本書をここまでかなりの程度読み進めたあなたは、もはや初心者ではありません。
すぐに、プロジェクトをディレクトリに整頓して、プロジェクトで作業する際は、Rのワーキング・ディレクトリの関連するディレクトリに設定するようになります。

Rの中でワーキング・ディレクトリを設定することができますが、**お薦めしません**。

```{r}
#| eval: false
setwd("/path/to/my/CoolProject")
```

それよりも良い方法があります。R
での作業を専門家のように管理する道に通じる方法でもあります。
それは、**RStudio**の**プロジェクト**を使う方法です。

### RStudioのプロジェクト

あるプロジェクトに関連する全てのファイル (入力データ、Rスクリプト、分析結果と図) を1つのディレクトリに一緒にしておくことはとても賢明な慣行なので、RStudioは**プロジェクト**を通じてその慣行を支持するよう組み込んでいます。
本書の残りを通じて作業する際は、プロジェクトを作って使いましょう。
FileメニューからNew Projectを選択、それから @fig-new-project に示されたステップに従います。

```{r}
#| label: fig-new-project
#| echo: false
#| fig-cap: | 
#|   新しくプロジェクトを作るために、(一番上) まず New Directory をクリック、
#|   (真ん中) 次に New Project をクリック、(一番下) そして、ディレクトリ名
#|   (プロジェクト名) を入力、そのディレクトリがサブディレクトリとして
#|   入るのにふさわしいディレクトリを選択して、Create Projectをクリック。
#| fig-alt: |
#|   New Projectメニューの3つのスクリーンショット。1番目のスクリーンショット
#|   は、Create Project ウィンドウで、New Directoryが選択されている。
#|   2番目のスクリーンショットは、Project Type ウィンドウで、Empty Project が
#|   選択されている。3番目のスクリーンショットは、Create New Project
#|   ウィンドウで、directory name に r4ds と入力され、Desktopの
#|   サブディレクトリとしてプロジェクトが作成されようとしている。
#| out-width: ~

knitr::include_graphics("diagrams/new-project.png")
```

プロジェクト名は`r4ds`。プ
ロジェクトをどこのサブディレクトリに置くべきか、慎重に検討してください。
どこか分かりやすい所に置かないと、将来探すのが難しくなりますよ！

この過程を完了すれば、本書のためだけの新しいRStudioのプロジェクトが出来ます。
プロジェクトの"ホーム"が現在のワーキング・ディレクトリになっていることを確認します。

```{r}
#| eval: false
getwd()
#> [1] /Users/hadley/Documents/r4ds
```

では、以下のコマンドをスクリプト・エディタに入力して、ファイルを"diamonds.R"と名付けて保存します。
それから、"data"という名の新しいフォルダを作成。
RStudioのFiles区画で"New Folder"ボタンをクリックすれば、作成できます。
最後に、スクリプト全体を実行。す
ると、プロジェクト・ディレクトリにPNGファイルとCSVファイルが保存されます。
細かいことは、本書の先で学習しますので、今は悩む必要はありません。

```{r}
#| label: toy-line
#| eval: false

library(tidyverse)

ggplot(diamonds, aes(x = carat, y = price)) + 
  geom_hex()
ggsave("diamonds.png")

write_csv(diamonds, "data/diamonds.csv")
```

RStudioを終了。
プロジェクトに関連付けたフォルダの中を調べてみましょう。`.`
`Rproj`ファイルがありますね。そ
のファイルをダブル・クリックして、プロジェクトを再開します。
プロジェクトから離れた場所に戻っています。ワ
ーキング・ディレクトリが同じですし、コマンド履歴も同じ、作業中だった全てのファイルは開いたままです。
ただ、上記の指示に従ったおかげで、完全にフレッシュな環境、白紙状態からはじめていることが保証されています。

あなたのコンピュータのOS特有の仕方で`diamonds.png`を探すと、そのPNGファイル (当然です) だけでなく、それを作成したスクリプト (`diamonds.R`) も見つかります。
大勝利です！
いつの日か、図を作成し直したくなったり、もしくは、どこから作成されたのか理解だけでもしたくなったりするでしょう。
図を必ず**Rコードと一緒に**保存するようにして、決してマウスやクリップボードを使って保存しないのなら、昔の仕事を再現することは容易にできます！

### 相対パスと絶対パス

プロジェクト内に入ったら、相対パスだけを使い、絶対パスは使わないようにします。
どこが違うのかって？
相対パスは、ワーキング・ディレクトリ、つまりはプロジェクトのホーム、に対して相対的です。
Hadleyが上記で`data/diamonds.csv`と書いた際は、`/Users/hadley/Documents/r4ds/data/diamonds.csv`のショートカットになっています。
しかし、重要なことに、Mineが彼女のコンピュータでこのコードを実行する際は、それは`/Users/Mine/Documents/r4ds/data/diamonds.csv`を指しています。
だから、相対パスが重要なのです。R
プロジェクト・フォルダがどこに置かれていても、相対パスなら機能するのです。

絶対パスは、ワーキング・ディレクトリがどこであれ、同じ場所を指します。
OSによって少々違った格好になります。
Windowsでは、ドライブを表す文字 (例えば、`C:`) か、2つのバックスラッシュ (例えば、`\\servername`) からはじまります。M
ac/Linuxでは、スラッシュ "/" (例えば、`/users/hadley`) からはじまります。
共有できなくなるので、スクリプトの中で絶対パスを**決して**使ってはなりません。あ
なたと全く同じディレクトリ構成にしている人などいないでしょう。

OSでもう一つ重要な違いは、パスの構成要素を区切る仕方です。
Mac/Linuxはスラッシュで区切ります (例えば、`data/diamonds.csv`) が、Windowsはバックスラッシュで区切ります (例えば、`data\diamonds.csv`)。
(あなたが現在使っているOSが何であれ) Rはどちらの区切りでも動作しますが、残念なことにRにとってバックスラッシュは別の特殊な意味があるので、パスにバックスラッシュを一つ記すためには、二つのバックスラッシュを打ち込む必要があります！
そんなこと、面倒過ぎる。と
いうわけで、パスの区切りにはMac/Linuxスタイルのスラッシュを常に使うことをお薦めします。

## 練習問題

1.  X (旧Twitter) のアカウント RStudio Tips <https://twitter.com/rstudiotips> を見て、面白そうなヒントを一つ探し出しなさい。
    使ってみよ！

2.  RStudioが診断で報告してくれる、その他よくある間違いは何か？
    <https://support.posit.co/hc/en-us/articles/205753617-Code-Diagnostics> を読んで、探し出しなさい。

## まとめ

本章では、Rコードをスクリプト (ファイル) とプロジェクト (ディレクトリ) に整頓する方法を学習しました。
コード・スタイルと同じく、最初は面倒なだけと感じられるかもしれません。
しかし、複数のプロジェクトでもっとコードを蓄積していくにつれ、最初に少々整頓しておいたことが、その先で大いに時間を節約してくれることに、感謝するようになるでしょう。

まとめると、スクリプトとプロジェクトは、将来にわたって役立つ、以下のような堅固なワークフローを与えてくれます。

-   データ分析プロジェクトごとに一つのRStudioのプロジェクトを作成。
-   プロジェクト内のスクリプトを (分かりやすい名前を付けて) 保存、編集、コマンドごとに、あるいは、全体で実行。しょっちゅうRを再起動して、確実に全てをスクリプトに取り込む。
-   相対パスのみを使い、決して絶対パスは使わない。

こうすれば、必要なもの全てを一箇所に集め、作業中の他のプロジェクトとはきれいに分離できます。

ここまでは、Rパッケージ内にバンドルされたデータセットで作業してきました。
練習しやすいように、予め用意されたデータを使っていました。し
かし、あなたのデータは、明らかに、同じように用意されていません。
なので、次章では、readrパッケージを使って、ディスクからデータをRセッションへロードする方法を学習します。
