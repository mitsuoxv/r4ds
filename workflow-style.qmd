# ワークフロー：コード・スタイル {#sec-workflow-style}

```{r}
#| echo: false

source("_common.R")
```

良いコード・スタイルは正しく句読点を打つことに似ています。そ
うしなくても読めなくはないけれど、そうすれば確かに読みやすくなる、という点で。
プログラムをはじめたばかりだとしても、コード・スタイルを意識することをお薦めします。
首尾一貫したスタイルを使えば、 他の人 (将来のあなた自身を含んでいます！) が読みやすくなります。誰
か他の人からヘルプを得る必要がある場合は特に重要です。
本章は、本書を通じて使われている [tidyverse style guide](https://style.tidyverse.org) の重要なポイントを紹介します。

最初はコード・スタイルなど面倒に感じるかもしれませんが、練習すればすぐに自然とできるようになります。
加えて、Lorenz Walthertによる[**styler**](https://styler.r-lib.org)パッケージのように、既存のコードを素早くきれいなスタイルにしてくれる素敵な道具もいくつかあります。
`install.packages("styler")`としてインストールしておくと、RStudioの**コマンド・パレット**経由で簡単に使うことができます。
RStudioの組み込みコマンドやパッケージが提供する多くのアドインが**コマンド・パレット**経由で使えます。
Cmd/Ctrl + Shift + P と押してパレットを開いて、"styler"と打ち込めば、stylerが提供する全てのショートカットを見ることができます。
@fig-styler のように出て来ます。

```{r}
#| label: fig-styler
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   RStudioのコマンド・パレットを使えば、キーボードだけで全てのRStudio
#|   コマンドに容易にアクセスできます。
#| fig-alt: |
#|   "styler"と打ち込んだ後のコマンド・パレットのスクリーンショット。
#|   パッケージが提供する4つのスタイル化道具が映っている。

knitr::include_graphics("screenshots/rstudio-palette.png")
```

本章では、コード例のためにtidyverseとnycflights13パッケージを使います。

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(nycflights13)
```

## 名前

名前については @sec-whats-in-a-name で、少しお話ししました。
(`<-`で代入されたり、`mutate()`で作成されたりする) 変数の名前には、小文字と数字と`_`だけを使うべきでしたよね。
`_`を使って単語をつないで名前にします。

```{r}
#| eval: false

# こんな風に
short_flights <- flights |> filter(air_time < 60)

# これはダメ
SHORTFLIGHTS <- flights |> filter(air_time < 60)
```

経験則として一般的に、手早く打ち込める短い名前よりも、分かりやすく説明する長たらしい名前にするようにした方が良いです。
短い名前にして節約できる時間は (特にオートコンプリートが打ち込み完了を手伝ってくれるので) ごくわずかなのに、古いコードに立ち戻って暗号のような略称を解読しなければならなくなったらとても時間をくうのですから。

関連するものにたくさん名前を付ける場合、首尾一貫するよう最大限努めましょう。
以前の慣例を忘れると、簡単に首尾一貫しなくなります。で
すから、立ち戻って、名前を付け直さなくなっても気に病むことはありません。
一般的に、あるテーマの変異体である変数がたくさんある場合、接尾語ではなく、接頭語を共通にするのが吉です。オ
ートコンプリートが共通の接頭語が付いた変数名を候補に挙げてくれるからです。

## スペース

`^`を除く算術演算子 (例えば、`+`、`-`、`==`、`<`など) と代入子 (`<-`) の両端にはスペースを入れます。

```{r}
#| eval: false

# こんな風に
z <- (a + b)^2 / d

# これはダメ
z<-( a + b ) ^ 2/d
```

関数に付く括弧の内側にも外側にもスペースは入れません。
コンマの後には常に一つスペースを入れます。普
通の英語と同様です。

```{r}
#| eval: false

# こんな風に
mean(x, na.rm = TRUE)

# これはダメ
mean (x ,na.rm=TRUE)
```

コードの並びを改善するために、余分なスペースを入れることは構いません。
例えば、`mutate()`の中で複数の変数を作る場合、`=`が揃うように、スペースを入れたいかもしれません。[^workflow-style-1]
コードをざっと見るのが容易になります。

[^workflow-style-1]: `dep_time`は`HMM`か`HHMM`の形式なので、整数除算 (`%/%`) を使って時間を、剰余 (モードともいう、`%%`) を使って分を得ている。

```{r}
#| eval: false

flights |> 
  mutate(
    speed      = distance / air_time,
    dep_hour   = dep_time %/% 100,
    dep_minute = dep_time %%  100
  )
```

## パイプ {#sec-pipes}

`|>`の前には常に一つスペースを入れます。大
抵の場合、行の最後に置きます。
そうすると、新しくステップを追加したり、既存のステップを並び替えたり、ステップ内の要素を修正したり、左側に並ぶ動詞をざっと見て高度10,000フィートからの外観を得たりすることが簡単になります。

```{r}
#| eval: false

# こんな風に
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# これはダメ
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

パイプの先の関数に (`mutate()`や`summarize()`のように) 名前付き引数がある場合、引数ごとに行を変えます。
(`select()`や`filter()`のように) 名前付き引数がない場合、1行に収まる限り全てを1行に入れます。1
行に収まらない場合は、引数ごとに行を変えます。

```{r}
#| eval: false

# こんな風に
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# これはダメ
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())
```

パイプラインの最初のステップの後は、2つのスペースで各行をインデントします。
RStudioで`|>`後に改行すると、自動的にスペースを入れてくれます。
引数ごとに改行する場合、さらに2つのスペースを追加してインデントします。
その場合、`)`だけの行はインデントしないで、`)`の水平位置が関数名の最初の一文字と一致するようにします。

```{r}
#| eval: false

# こんな風に
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# これはダメ
flights|>
  group_by(tailnum) |> 
  summarize(
             delay = mean(arr_delay, na.rm = TRUE), 
             n = n()
           )

# これもダメ
flights|>
  group_by(tailnum) |> 
  summarize(
  delay = mean(arr_delay, na.rm = TRUE), 
  n = n()
  )
```

パイプラインがやすやすと一行に収まるなら、ルールを曲げても構いません。
しかし、われわれの集合的経験として、一行のコードが長いコードに変わっていくことはよくあることなので、はじめから垂直方向のスペースを確保しておいた方が、長い目で見ると通常、時間の節約になります。

```{r}
#| eval: false

# やすやすと一行に収まる
df |> mutate(y = x + 1)

# こうすると4倍の行を使うが、将来、変数やステップを
# 簡単に追加できる
df |> 
  mutate(
    y = x + 1
  )
```

最後に、あまりに長くパイプでつなぐのは避けましょう。1
0から15行よりも長いのは長過ぎます。
小さなサブ・タスクに分割して、各タスクに分かりやすい名前を付けるようにしましょう。
名前を付けることで、何が起こっているのか、コードを読む人にヒントになります。ま
た、中間結果が予想通りになっているかチェックするのも容易になります。
例えば、pivotやsummarizeなどでデータ構造を根本から変えた際は、なんであれ分かりやすい名前を付けられるなら、分かりやすい名前を付けましょう。
最初から上手く行くなどと考えないことです！
良い名前を付けられる中間の状態があるなら、長いパイプラインを分割することです。

## ggplot2

パイプに当てはまる基本ルールは、ggplot2にも同様に当てはまります。`+`
を`|>`と同じように扱うだけです。

```{r}
#| eval: false

flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = month, y = delay)) +
  geom_point() + 
  geom_line()
```

ここでも、関数の引数が一行に収まらない場合は、引数ごとに改行しましょう。

```{r}
#| eval: false

flights |> 
  group_by(dest) |> 
  summarize(
    distance = mean(distance),
    speed = mean(distance / air_time, na.rm = TRUE)
  ) |> 
  ggplot(aes(x = distance, y = speed)) +
  geom_smooth(
    method = "loess",
    span = 0.5,
    se = FALSE, 
    color = "white", 
    linewidth = 4
  ) +
  geom_point()
```

`|>`から`+`へ切り替えていることに注意してください。
切り替え不要だと良かったのですが、パイプが発見される前にggplot2が書かれたので、残念ながら仕方ありません。

## セクション分けコメント

スクリプトが長くなったら、**セクション分け**コメントを使って、ファイルを管理可能な部分へ分割できます。

```{r}
#| eval: false

# Load data --------------------------------------

# Plot data --------------------------------------
```

RStudioのキーボード・ショートカット (Cmd/Ctrl + Shift + R) を使えば、これらのヘッダーを作成でき、エディタの左下にあるコード・ナビゲーション・ドロップダウンに、 @fig-rstudio-sections のように表示されます。

```{r}
#| label: fig-rstudio-sections
#| echo: false
#| out-width: null
#| fig-cap: | 
#|   スクリプトにセクション分けコメントを追加すると、
#|   スクリプト・エディタの左下にあるコード・ナビゲーション道具を
#|   使って、簡単にコメント位置へ移動できる。

knitr::include_graphics("screenshots/rstudio-nav.png")
```

## 練習問題

1.  上記のガイドラインに従って、以下のパイプラインのスタイルを修正しなさい。

    ```{r}
    #| eval: false

    flights|>filter(dest=="IAH")|>group_by(year,month,day)|>summarize(n=n(),
    delay=mean(arr_delay,na.rm=TRUE))|>filter(n>10)

    flights|>filter(carrier=="UA",dest%in%c("IAH","HOU"),sched_dep_time>
    0900,sched_arr_time<2000)|>group_by(flight)|>summarize(delay=mean(
    arr_delay,na.rm=TRUE),cancelled=sum(is.na(arr_delay)),n=n())|>filter(n>10)
    ```

## まとめ

本章では、コード・スタイルの最も重要な原則を学習しました。
そこからはじめるには、恣意的なルールばかりだと感じたかもしれません (実際そうなのですから！) が、時を経るにつれ、もっとコードを書いて、より多くの人とコードを共有するにつれ、首尾一貫したスタイルがどれほど重要か分かるでしょう。
それと、stylerパッケージを忘れないように。貧
相なスタイルのコードを素早く改善してくれますよ。

次章では、データサイエンス道具に立ち戻って、整理データを学習します。
整理データは、首尾一貫した方法で整頓されたデータフレームで、tidyverseを通して使われます。
首尾一貫しているおかげで、ひとたび整理データにできると、大半のtidyverse関数で使えます。
もちろん、そこまでが大変で、そこいらで出会う大抵のデータセットは未整理データです。
ですから、tidyrパッケージを使って、未整理データを整理する方法も学習します。
