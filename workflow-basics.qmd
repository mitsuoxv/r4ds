# ワークフロー：基本 {#sec-workflow-basics}

```{r}
#| echo: false

source("_common.R")
```

ここまでで、Rコードを走らせる経験をいくらか積みました。
詳細は述べてきませんでしたが、基本は分かったはずです。で
なければ、不満を爆発させて本書を投げ捨ててしまっているでしょうから！
Rでプログラムをはじめる際に不満を覚えるのは自然なことです。R
はパンクチュエーションにとてもうるさく、一文字でも違っていると文句を垂れるのですから。
少々不満は覚えるでしょうが、その経験は典型的かつ一時的なものです。誰
にでも起きることですし、乗り越えるにはトライし続けるしかないのです。

先に進む前に、Rコードを走らせる基礎を固め、RStudioの最も役立つ機能を会得していることを確認しましょう。

## コーディングの基本

できるだけ速くプロットできるになってもらうため、ここまで省略してきた基本のいくつかを検討しましょう。
Rを使って、基礎的な数値計算が可能です。

```{r}
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
```

代入子`<-`を使って、新しいオブジェクトを作れます。

```{r}
x <- 3 * 4
```

`x`の値はプリントされていませんね。た
だ保存されただけです。
値を見たければ、コンソールに`x`と打ち込みます。

複数の要素を一つのベクタにまとめるには、`c()`を使います。

```{r}
primes <- c(2, 3, 5, 7, 11, 13)
```

ベクタへの基礎的な算術は、ベクタの各要素に適用されます。

```{r}
primes * 2
primes - 1
```

オブジェクトを作るRの文、**代入**文、は全て同じ形式を取ります。

```{r}
#| eval: false

object_name <- value
```

このコードを読む際は、頭の中で"object nameがvalueを取る"と読みます。

しょっちゅう代入しますので、`<-`と打ち込むのは苦痛です。
RStudioではキーボード・ショートカット、Alt + - (マイナス・サイン) で済みます。
RStudioは、コード・フォーマットの良い慣例に従って、自動的に`<-`の両端にスペースを加えます。
素晴らし日に目に悪いコードを読むと、惨めな思いをします。ス
ペースを使って、目に優しいコードを書きましょう。

## コメント

Rは行に`#`があると、そこから後ろは無視します。
Rには無視されるが、人間には読めるので、コメントが書けるのです。
コードで何をしているのか説明するコメントを、例に含めることがあります。

コードが何をするのか簡略に述べるのに、コメントは役に立ちます。

```{r}
# create vector of primes
primes <- c(2, 3, 5, 7, 11, 13)

# multiply primes by 2
primes * 2
```

このような短いコードであれば、一行ずつコメントを付けることは不要でしょう。
しかし、コードが複雑になってくると、あなた (とあなたの共同作業者) がコードが何をしているのか見つけ出す時間を、コメントは大いに省けます。

コードの*いかに*や*何を*ではなく*なぜ*を説明するのに、コメントは使ってください。
コードの*いかに*や*何を*は、面倒かもしれませんが、注意深く読めば、必ず見つけ出すことが可能です。
全てのステップにコメントを付けてから、コードを変えると、コメントも忘れずにアップデートしないと、将来コードに戻って来たときに混乱してしまいます。

*なぜ*こうしているのか、は見つけ出すのが不可能でないとしてもずっと困難です。
例えば、`geom_smooth()`には`span`という引数があって、曲線の滑らかさをコントロールしていて、値を大きくするほど曲線は滑らかになります。
`span`の値をデフォルトの0.75から0.9に変更することにしたとします。将
来コードを読む人にとって、*何を*しているのか理解することは容易ですが、コメントを付けていないと、*なぜ*デフォルトから変更したのか理解することはできません。

データ分析のコードでは、取り組みの全体計画を説明し、重要な洞察に出会うたびにそれを記録するために、コメントを使いましょう。
コード自体からこの知識を再把握することはできないのですから。

## 名前の付け方 {#sec-whats-in-a-name}

オブジェクトの名前は文字ではじまり、含んで良いのは文字、数字、`_`と`.`だけです。
オブジェクトの名前は複数の言葉で描写したいので、そのための慣例に従う必要があります。
小文字の言葉を`_`でつなぐ**snake_case**がお薦めです。

```{r}
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

@sec-workflow-style でコード・スタイルを議論するときに、もう一度、名前に立ち返ります。

名前を打ち込むと、オブジェクトを調べられます。

```{r}
x
```

もう一つ、代入をします。

```{r}
this_is_a_really_long_name <- 2.5
```

このオブジェクトを調べるのに、RStudioの補完機能を試してみましょう。最
初の数文字を打ち込むと、補完候補が出て来ます。"
this"と打ち込んで、TABを押して、returnを押します。

`this_is_a_really_long_name`に代入すべき値は3.5だったのに、間違って2.5と入力してしまった、としましょう。
これを修正するのに、別のキーボード・ショートカットが使えます。
↑ を押すと、最後に入力したコマンドが出て来ますので、それを編集できます。
もしくは、"this"と入力して、Cmd/Ctrl + ↑ を押すと、これまでに入力したコマンド中で"this"ではじまるものが出て来ます。
矢印キーを使って選択して、enterを押すと、そのコマンドを再入力できます。
そして、2.5を3.5に変えて、再実行。

代入をもう一つ。

```{r}
r_rocks <- 2^3
```

調べてみましょう。

```{r}
#| eval: false

r_rock
#> Error: object 'r_rock' not found
R_rocks
#> Error: object 'R_rocks' not found
```

こうしてみると、あなたとRの暗黙の契約が見えてきます。R
はあなたに代わって面倒な計算をしてくれます。そ
の替わり、あなたの指示は完全に精確でなければなりません。
さもないと、あなたが探しているオブジェクトは見つからない、というエラーをくらうことになります。
入力ミスは重大です。R
にはあなたの心は読めません。`r`
`_rock`と入力したら、たぶん`r_rocks`のことだな、と読んでくれません。
大文字小文字の違いも重大です。や
はり、Rにはあなたの心は読めません。`R`
`_rocks`と入力したら、たぶん`r_rocks`のことだな、と読んでくれません。

## 関数呼び出し

Rには膨大な組み込み関数があり、以下のように呼び出せます。

```{r}
#| eval: false

function_name(argument1 = value1, argument2 = value2, ...)
```

一定間隔の数列 (**seq**uences) を作る`seq()`を試しに使ってみましょう。そ
の過程で、RStudioのもっと役立つ機能を学習します

`se`と入力して、TABを押します。
補完候補がポップアップに出て来ます。
もう一文字`q`を入力して候補を減らすか、↑/↓の矢印キーで選ぶかして、`seq()`をハイライトします。
バルーンヘルプが出て来て、関数の引数や目的を思い起こさせてくれます。
もっとヘルプが欲しければ、F1を押せば、右下区画のHelpタブに全ての詳細が出て来ます。

使いたい関数を選んだら、もう一度TABを押します。
RStudioが括弧のペア、`(`と`)`、を加えてくれます。
第1引数の名前`from`を入力して、イコール`1`にします。
次に、第2引数の名前`to`を入力して、イコール`10`とします。
最後に、returnを押します。

```{r}
seq(from = 1, to = 10)
```

関数呼び出しでは、最初のいくつかの引数の名前は省略するのが通常ですから、以下のように書き直せます。

```{r}
seq(1, 10)
```

以下のコードを入力すると、RStudioは引用符でもペアを加えてくれることに気付きます。

```{r}
x <- "hello world"
```

引用符と括弧は常にペアである必要があります。
RStudioはあなたを助けるべくベストを尽くしますが、それでもごたごたして、ペアでなくなってしまうことがあります。
そのときは、続きの入力を求めるべく、Rは"+"を表示します。
If this happens, R will show you the continuation character "+":

```         
> x <- "hello
+
```

`+`があなたに伝えていることは、Rは入力が未完と考え次の入力を待っている、ということです。
通常、`"`か`)`を入力し忘れたことを意味します。欠けたペアを加えるか、ESCAPEを押してコマンドを放棄し再入力し直すかしましょう。

右上区画のEnvironmentタブには、作成したオブジェクト全てが表示されます。

```{r}
#| echo: false
#| fig-alt: |
#|   RStudioのEnvironmentタブの中に、r_rocks、this_is_a_really_long_name、 
#|   xとyがGlobal Environmentに表示されている。

knitr::include_graphics("screenshots/rstudio-env.png")
```

## 練習問題

1.  以下のコードが上手く行かない理由は？

    ```{r}
    #| error: true

    my_variable <- 10
    my_varıable
    ```

    注意深く見てください！
    (どうでもよい練習問題に思えるかもしれませんが、プログラムをする際は、ほんの些細な違いに気付くよう脳を鍛えておくことは割に合います。)

2.  以下の各Rコマンドが正しく動作するよう修正しなさい。

    ```{r}
    #| eval: false

    libary(todyverse)

    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = "lm)
    ```

3.  Option + Shift + K (Windows)/ Alt + Shift + K (Mac or Linux)を押せ。
    どうなった？
    メニューを使って、同じようにする方法は？

4.  @sec-ggsave の練習問題を再訪してみよう。
    以下のコードを実行しなさい。
    2つのプロットのうち、mpg-plot.pngとして保存されたのはどちら？
    その理由は？

    ```{r}
    #| eval: false

    my_bar_plot <- ggplot(mpg, aes(x = class)) +
      geom_bar()
    my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave(filename = "mpg-plot.png", plot = my_bar_plot)
    ```

## まとめ

Rコードの動作の仕方についてもう少し、また、自分の書いたコードを将来理解するために助けになるちょっとしたやり方をいくつか学習しました。
次章では、データサイエンスの旅を続けて、dplyrを学習します。d
plyrはtidyverseのパッケージで、データの変換、重要な変数の選択、興味のある行の抽出、要約統計値の計算を助けてくれます。
