# データ可視化 {#sec-data-visualization}

```{r}
#| echo: false

source("_common.R")
```

## はじめに

> "単純なプロットほど、データ分析者の心に情報を届けてくれるものはない。" --- John Tukey

Rにはプロットを描くシステムがいくつかありますが、ggplot2 が最もエレガントで最も汎用的なものの一つです。
ggplot2 は、プロットを記述、構築する首尾一貫したシステムである**グラフィックスの文法**を実装しています。
ggplot2 を使えば、一つのシステムを学ぶとそれを多くの場所で適用できるので、多くのことをより速くできます。

本章では、**ggplot2** を使ってデータを可視化するやり方を学習します。
単純な散布図の作成から始めて、それを使ってggplot2 の根本的構築ブロックである、エステティック・マッピングと幾何オブジェクトを紹介します。
それから、1つの変数の分布、2つ以上の変数間の関係を可視化していきます。
最後に、描いたプロットを保存して、トラブルシューティングのヒントで締めます。

### 準備するもの

本章がフォーカスするのはtidyverse のコア・パッケージの一つggplot2 です。
本章で使うデータセット、ヘルプページや関数にアクセスするには、以下を実行してtidyverse をロードします。

```{r}
#| label: setup

library(tidyverse)
```

この一行のコードでtidyverse のコア・パッケージ群をロードしています。ほ
ぼ全てのデータ分析で使用するパッケージ群です。
また、tidyverse のどの関数がベースRの関数（または、これ以前にロードした他のパッケージ）とコンフリクトしているかも教えてくれています。[^data-visualize-1].

[^data-visualize-1]: このメッセージを消して、意図したようにコンフリクトを解消するには、conflicted パッケージを使います。よ
    り多くのパッケージをロードするにつれ、重要になってきます。
    conflicted パッケージについては、<https://conflicted.r-lib.org>でさらに学習できます。

もしこのコードを実行して、`there is no package called 'tidyverse'` というエラーメッセージが出たら、インストールを済ませてから再度`library()` を実行してください。

```{r}
#| eval: false

install.packages("tidyverse")
library(tidyverse)
```

パッケージのインストールは一度で済みますが、ロードは新しいセッションを開始するたびに必要です。

tidyverse に加えて、パルマー諸島の３つの島に住むペンギンを身体測定したデータセットである**palmerpenguins** パッケージと、色盲の人にも識別可能なカラー・パレットを提供してくれるggthemes パッケージも使います。

```{r}
library(palmerpenguins)
library(ggthemes)
```

## 最初のステップ

翼の長いペンギンは短いペンギンより体重が重いの、軽いの？
たぶん回答を知っているでしょうが、正確に答えるよう努めてみましょう。
翼の長さと体重の関係はどう見えるのか？
正の関係？
負の関係？
リニアな関係？
ノンリニア？
ペンギンの種族によって関係は違うの？
ペンギンが住んでいる島によって違ったりする？
こんな質問に答えられるような可視化をしてみましょう。

### `penguins` データフレーム

palmerpenguins パッケージの中にある`penguins` **データフレーム** (`palmerpenguins::penguins` のことです)を使えば、これらの質問へのあなたの回答をチェックできます。
データフレームとは、（列を成す）変数と（行を成す）観測を矩形に集めたものです。
`penguins` には`r nrow(penguins)` 個の観測が入っています。D
r.
Kristen Gorman と the Palmer Station, Antarctica LTER[^data-visualize-2] が集めて公開してくれているものです。

[^data-visualize-2]: Horst AM, Hill AP, Gorman KB (2020).
    palmerpenguins: Palmer Archipelago (Antarctica) penguin data.
    R package version 0.1.0.
    <https://allisonhorst.github.io/palmerpenguins/>.
    doi: 10.5281/zenodo.3960218.

議論を容易にするために、以下、いくつかの用語を定義しましょう。

-   **変数**とは、測定可能な量、質、もしくは、特性。

-   **値**とは、測定時の変数の状態。
    変数の値は測定ごとに変化するかもしれません。

-   **観測**とは、似た状況下で（通常は、同じ対象に対して同時に）測定した値の集合。
    一つの観測には複数の値があり、それぞれが別々の変数につながっています。
    観測のことをデータポイントと呼ぶこともあります。

-   **表形式データ**とは、それぞれが変数と観測につながっている値の集合。
    各値が自身の"セル"に、各変数が自身の列に、各観測が自身の列に置かれているなら、その表形式データは*整理されている*と言います。

この文脈では、各変数は全てのペンギンの属性を指し、各観測は一羽の全ての属性を指します。

コンソール区画にデータフレームの名前を打ち込むと、Rがその中身のプレビューを出力してくれます。
このプレビューの一番上に`tibble` とありますね。
tidyverse では、特殊なデータフレームである**tibbles** を使います。通
常のデータフレームとどう違うのかなどはすぐに学習します。

```{r}
penguins
```

このデータフレームには`r ncol(penguins)`個の列があります。
別の見方として、全ての変数と変数ごとに最初の2、3の観測を見るには、`glimpse()`を使います。
RStudioを使っていれば、`View(penguins)`を実行すれば、インターアクティブにデータを見られるウィンドウが開きます。

```{r}
glimpse(penguins)
```

以下の変数が`penguins`に含まれています。

1.  `species`: ペンギンの種族 (Adelie、Chinstrap、Gentoo)

2.  `flipper_length_mm`: ペンギンの翼の長さ、ミリメートル表示

3.  `body_mass_g`: ペンギンの体重、グラム表示

`penguins`についてもっと知るには、`?penguins`を実行してヘルプページを開いてください。

### 究極の目標 {#sec-ultimate-goal}

本書での究極の目標は、ペンギンの翼の長さと体重の関係を、ペンギンの種族を考慮しつつ表示した以下の可視化を再現することです。

```{r}
#| echo: false
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図で、
#|   この２変数間の関係にベストフィットする線を重ねている。この２変数間の
#|   正の、かなりリニアな、そして比較的強い関係をプロットは表している。
#|   種族 (Adelie、Chinstrap、Gentoo) はそれぞれ異なる色と形で表されている。
#|   体重と翼の長さの関係はこれら３種族でほぼ同じだが、 Gentoo は他の２種族
#|   より大きい。

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  scale_color_colorblind()
```

### ggplotの作成

このプロットを一歩ずつ再現しましょう。

ggplot2でのプロット作成は、`ggplot()`関数でプロットのオブジェクトを定義するところから始めて、次に**レイヤー**を追加していきます。
`ggplot()`の最初の引数はグラフで使うデータセットです。だ
から、`ggplot(data = penguins)`とすると、`penguins`のデータを表示する準備ができた、空のグラフを作成します。デ
ータをどう可視化するか伝えていないので、今のところ空なのです。
あまり面白くないプロットですが、プロットの残りのレイヤーを描いていく空のキャンバスのように考えることができます。

```{r}
#| fig-alt: |
#|   空の灰色のプロット領域。

ggplot(data = penguins)
```

次に、データからの情報をどう目に見えるように表すか、`ggplot()`に伝えます。
`ggplot()`関数の`mapping`引数で、データセットの変数をプロットの見える属性 (**エステティック属性**) にどうマップするか指定します。
`mapping`引数は常に`aes()`関数で、その中で指定します。例
えば、`aes()`の引数`x`と`y`で、どの変数をx軸とy軸にマップするか指定します。
とりあえず、翼の長さを`x`エステティック属性に、体重を`y`エステティック属性にマップするだけにします。
ggplot2は`data`引数、この場合`penguins`ですが、の中から、マップされた変数を探し出します。

ここまでのマッピングの結果が以下のプロットです。

```{r}
#| fig-alt: |
#|   プロットは、170から230にわたる翼の長さをx軸に、
#|   3000から6000にわたる体重をy軸に表示。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
```

空のキャンバスに構造が加わりました。翼
の長さがどこに(x軸上に)、体重がどこに(y軸上に)表示されることが明らかになっています。
でもまだ、ペンギン自身はプロット上に表されていません。
データフレーム内の観測をプロット上にどう表すか、まだコードで明確に伝えていなきからです。

そうするには、データを表すのにプロットが用いる幾何オブジェクト、**geom**を指定する必要があります。
こららの幾何オブジェクトは、ggplot2では`geom_`で始まる関数で利用可能になります。
どのタイプのgeomを使っているかで、プロットを呼び分けるのが普通です。
例えば、棒グラフは bar geoms (`geom_bar()`)、線グラフは line geoms (`geom_line()`)、ボックスプロットは boxplot geoms (`geom_boxplot()`)、散布図は point geoms (`geom_point()`)を使ったプロット、という具合です。

`geom_point()`関数はプロットに点のレイヤーを追加して、散布図を作ります。
ggplot2には多くのgeom関数があり、それぞれ異なるタイプのレイヤーをプロットに追加します。
本書を通じて、特に @sec-layers で、もっと多くのgeomを学習します。

```{r}
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図。この２変数間の
#|   正の、かなりリニアな、そして比較的強い関係をプロットは表している。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point()
```

これで"散布図"らしく見えるようになりました。
でもまだ、"究極の目標"であるプロットに届いていません。で
すが、このプロットを使って、探索を動機付けた質問"翼の長さと体重の関係はどう見えるか？"に答えられるようになりました。関
係は正 (翼の長さが増えるにつれて体重も増える) で、かなりリニア (点が曲線ではなく直線に集まっている) で、そこそこ強い (直線から点があまり離れていない)ようです。
翼の長いペンギンは体重が総じて重いということです。

このプロットにさらにレイヤーを追加する前に、いったん立ち止まって、出てきた以下の警告メッセージを検討してみましょう。

> Removed 2 rows containing missing values (`geom_point()`).

このメッセージが出てきたのは、データセットの中に体重と翼の長さの両方、あるいは、片方が欠損したペンギンが２羽あったからです。両
方が揃っていないとggplot2はプロット中に表示できません。
Rと同じく、ggplot2も、欠損値が黙っていなくなってはいけない、という哲学に同意しています。
このタイプの警告はおそらく、実際のデータで作業する際、しょっちゅう出くわすタイプの警告の一つです。実
際のデータに欠損値はつきものなので。欠
損値については、本書を通じて、特に @sec-missing-values でさらに学習します。
本章での残りのプロットでは、この警告は表示しないようにします。

### エステティック属性とレイヤーを追加 {#sec-adding-aesthetics-layers}

2変数間の関係を示すのに散布図は役に立ちますが、一見した関係に騙されないよう常に気を付けてください。こ
の一見した関係を説明する、もしくは、その性質を変化させる他の変数がないか考えることをお薦めします。
例えば、翼の長さと体重の関係は種族ごとに違うのでしょうか？
プロットに種族を取り込んでみましょう。2
変数間の一見した関係について新たな洞察が得られるかみてみましょう。
種族ごとに点の色を変えることで表します。

そうするには、エステティック属性とgeomのどちらを修正する必要があるのでしょうか？
"`aes()`の中のエステティック・マッピング"を修正するのでは、と思ったとしたら、あなたはggplot2を使ったデータ可視化の手掛かりを得つつあるということです！
そう思わなかったとしても、悩むことはありません。
本書を通じてもっと多くのggplotを作成していきますので、その過程で直観をチェックする機会はいくらもあります。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図。この２変数間の
#|   正の、かなりリニアな、そして比較的強い関係をプロットは表している。
#|   種族 (Adelie、Chinstrap、Gentoo) はそれぞれ異なる色で表されている。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point()
```

カテゴリ変数がエステティック属性にマップされると、ggplot2は自動的に、変数のユニークなレベルごと（この場合は3つの種族のぞれぞれ）に、ユニークな値（この場合はユニークな色）をエステティック属性に割り振ります。こ
の過程を**スケーリング**といいます。
ggplot2はまた、どの値がどのレベルに対応しているのか説明する凡例を追加します。

もう一つレイヤーを追加して、体重と翼の長さの間の関係を示す滑らかな曲線を表しましょう。
先を読む前に、上のコードを見直して、ここまでのプロットにどう追加できるか考えてみてください。

データを表す新しい幾何オブジェクトなので、新しい`geom_smooth()`を追加します。
`method = "lm"`として、リニアモデルでベストフィットの線を引くことを指定します。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図。散布図に重なる３つの滑らかなカーブは
#|   ３つの種族 (Adelie、Chinstrap、Gentoo) ごとに、これら２変数間の関係を
#|   表す。点と滑らかなカーブの色は種族ごとに異なる色でプロットされている。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
  geom_point() +
  geom_smooth(method = "lm")
```

複数の線を追加できましたが、@sec-ultimate-goal のプロットとは似つかぬプロットになってしまいました。そ
こではデータセット全体にフィットした一本の線だったのに、ペンギンの種族ごとにフィットした複数の線になっています。

エステティック属性を`ggplot()`で指定すると、*グローバル*レベルでの指定となり、重ねるレイヤーの全てに伝わります。
でも、ggplot2のgeom関数は皆、`mapping` 引数を取ることができ、そこでエステティック属性を指定すれば*local*レベルの指定として、グローバルレベルから引き継いだ指定に加えることができます。
点の色は種族ごとに変えたいけど、線は別々にしたくないので、`color = species`の指定は`geom_point()`だけですべきなのです。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図。種族 (Adelie、Chinstrap、Gentoo) 
#|   ごとに、この２変数間の関係にベストフィットする線を一本ずつ重ねている。
#|   各種族は、点だけはそれぞれ異なる色でプロットされている。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species)) +
  geom_smooth(method = "lm")
```

やりました！
究極の目標にとてもよく似てきました。も
う少しです。
ペンギンの種族ごとに点の形を変えて、ラベルも改良しましょう。

プロットで色だけで情報を表すのは一般にお薦めできません。色
盲や色覚の差のせいで、人々の色の受け取り方は様々だからです。
なので、色に加えて、エステティック属性`shape`に`species`をマップします。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図。種族 (Adelie、Chinstrap、Gentoo) 
#|   ごとに、この２変数間の関係にベストフィットする線を一本ずつ重ねている。
#|   各種族は、点だけはそれぞれ異なる色と形でプロットされている。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species, shape = species)) +
  geom_smooth(method = "lm")
```

凡例が自動的にアップデートされました。点
の色だけでなく、形も変わることを反映しています。

最後に、新たしいレイヤーに`labs()`関数を使って、プロットのラベルを改良します。
`labs()`の引数のいくつかは名前の通りです。`t`
`itle`はタイトルを、`subtitle`はサブタイトルをプロットに追加します。
その他の引数はエステティック属性と一致しています。`x`
はx軸のラベル、`y`はy軸のラベル、`color`と`shape`は凡例のラベルを指定します。
加えて、ggthemesパッケージの`scale_color_colorblind()`関数を使えば、色盲の人にも識別できるよう、カラーパレットを改良できます。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重対翼の長さの散布図で、
#|   この２変数間の関係にベストフィットする線を重ねている。この２変数間の
#|   正の、かなりリニアな、そして比較的強い関係をプロットは表している。
#|   種族 (Adelie、Chinstrap、Gentoo) はそれぞれ異なる色と形で表されている。
#|   体重と翼の長さの関係はこれら３種族でほぼ同じだが、 Gentoo は他の２種族
#|   より大きい。

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

"究極の目標"と寸分違わぬプロットが出来ました！

### 練習問題

1.  `penguins`には行がいくつある？
    列はいくつ？

2.  `penguins`データフレームの`bill_depth_mm`は何を指す？
    `?penguins`でヘルプを読んで探しなさい。

3.  `bill_depth_mm`と`bill_length_mm`の散布図を作成しなさい。
    `bill_depth_mm`をy軸に、`bill_length_mm`をx軸にすること。
    この2変数間の関係を述べよ。

4.  `species`と`bill_depth_mm`で散布図を作成するとどうなる？
    geomのより良い選択は何か？

5.  以下コードがエラーになる理由は？　
    どう修正する？

    ```{r}
    #| eval: false

    ggplot(data = penguins) + 
      geom_point()
    ```

6.  `geom_point()`の`na.rm`引数は何をしているか？
    この引数のデフォルトは何？
    この引数を`TRUE`に設定して散布図を作成してみなさい。

7.  前の練習問題で作成したプロットに次のキャプションを追加しなさい。"
    Data come from the palmerpenguins package."　ヒント：`labs()`のドキュメントを見よ。

8.  次の可視化を再現しなさい。
    `bill_depth_mm`をどのエステティック属性にマップする？
    また、グローバルとgeomのどちらのレベルでマップする？

    ```{r}
    #| echo: false
    #| warning: false
    #| fig-alt: |
    #|   ペンギンの体重と翼の長さの散布図で、くちばしの厚さで色付け。
    #|   体重と翼の長さの関係の滑らかな曲線を重ねる。
    #|   関係は正で、相当リニアで、まずまず強い。

    ggplot(
      data = penguins,
      mapping = aes(x = flipper_length_mm, y = body_mass_g)
    ) +
      geom_point(aes(color = bill_depth_mm)) +
      geom_smooth()
    ```

9.  以下のコードを頭の中で走らせて、出力がどうなるか想像せよ。
    次に、Rでコードを実行し、想像が当たったかチェックしなさい。

    ```{r}
    #| eval: false

    ggplot(
      data = penguins,
      mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
    ) +
      geom_point() +
      geom_smooth(se = FALSE)
    ```

10. この2つのグラフは同じか違うか？
    その理由は？

    ```{r}
    #| eval: false

    ggplot(
      data = penguins,
      mapping = aes(x = flipper_length_mm, y = body_mass_g)
    ) +
      geom_point() +
      geom_smooth()

    ggplot() +
      geom_point(
        data = penguins,
        mapping = aes(x = flipper_length_mm, y = body_mass_g)
      ) +
      geom_smooth(
        data = penguins,
        mapping = aes(x = flipper_length_mm, y = body_mass_g)
      )
    ```

## ggplot2コール {#sec-ggplot2-calls}

この導入に当たるセクションから先に進むにつれ、ggplot2コードの表記をより簡略にします。
ここまでは、学習の助けになるので、以下のように何も略さずに来ました。

```{r}
#| eval: false

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point()
```

関数の最初の、あるいは、最初の2つの引数はとても大事なので、それらが何か普通、自明なはずです。
`ggplot()`の最初の2つの引数は`data`と`mapping`ですが、今後はその名前は省略します。
打ち込みを節約して、余計な文字数を減らせるので、プロット間でどこが違うのか見やすくなります。
プログラムにとってとても大事なことです。
@sec-functions で再度述べます。

さきほどのプロットをより簡略に書き直すと、以下のようになります。

```{r}
#| eval: false

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

さらに先でパイプ`|>`を学習すると、以下のように書けるようになります。

```{r}
#| eval: false

penguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) + 
  geom_point()
```

## 分布の可視化

変数の分布を可視化する方法は、変数のタイプがカテゴリか数値かによって異なります。

### カテゴリ変数

変数が、値の小さな集合の中のどれらか一つだけを取れるとき、カテゴリ変数といいます。
カテゴリ変数の分布を検討するには、棒グラフが使えます。
棒の高さで`x`の各値ごとにいくつ観察されたかを表します。

```{r}
#| fig-alt: |
#|   ペンギンの種族ごとの頻度の棒グラフ。Adelie (約150)、
#|   Chinstrap (約90), Gentoo (約125)。

ggplot(penguins, aes(x = species)) +
  geom_bar()
```

上で見たペンギンの種族のように順番のないカテゴリ変数の棒グラフでは、頻度順に並べるのが大抵望ましいです。
そうするためには、変数を (Rがカテゴリ変数を扱うやり方である) ファクタに変換して、そのファクタのレベルを並べ直す必要があります。

```{r}
#| fig-alt: |
#|   ペンギンの種族ごとの頻度の棒グラフ。
#|   棒は高さ（頻度）が減っていく順序に並んでいる。
#|   Adelie (約150)、
#|   Chinstrap (約90), Gentoo (約125)。

ggplot(penguins, aes(x = fct_infreq(species))) +
  geom_bar()
```

ファクタと (上記の`fct_infreq()`のような) ファクタを扱う関数については、 @sec-factors でさらに学習します。

### 数値変数

変数が広い範囲の数値を取り、加算、引き算や平均を取ることに意味があるなら、それは**数値** (もしくは、量的) 変数です。
数値変数は連続値でも、離散値でもありえます。

連続変数の分散の可視化によく用いられるのは、ヒストグラムです。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重のヒストグラム。分布の山は一つで、
#|   右に偏っており、範囲は約2500から6500までに広がる。

ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

ヒストグラムはx軸を等間隔のビンに分け、各ビンに入る観察の数を棒の高さで表します。
上のグラフでは、最も高い棒の左端と右端である3,500と3,700グラムの間に`body_mass_g`の値が入る観察は、39個あることを表しています。

binwidth引数でヒストグラムの間隔幅を設定できます。`x`
変数の単位で設定します。
ヒストグラムを描くときは、binwidthを変えると違ったパターンが見えることがあるので、常にいくつものbinwidthを試すべきです。
下のプロットではbinwidth 20は狭すぎて、棒が多すぎて、分布の形を同定するのが困難になっています。
同様に、binwidth 2,000は広すぎて、3本だけの棒に全データが詰め込まれて、やはり分布の形を同定するのが困難です。
binwidthを200にすると、バランス良く、分布の形が見えます。

```{r}
#| warning: false
#| layout-ncol: 2
#| fig-width: 3
#| fig-alt: |
#|   ペンギンの体重の2つのヒストグラム、左側がbinwidth 20で、
#|   右側がbinwidth 2000。binwidth 20のヒストグラムでは、ビンの高さの
#|   アップ・ダウンが多く、輪郭がジグザグになっています。binwidth 2000の
#|   ヒストグラムにはビンが3つしかありません。

ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 20)
ggplot(penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 2000)
```

数値変数の分布のもう一つの可視化は密度プロットです。
密度プロットはヒストグラムを滑らかにしたバージョンで、根底にある滑らかな分布から得られた連続値である場合は特に、現実的な代替プロットになります。
`geom_density()`がどうやって密度を推計するか (関数のドキュメントを読めば載っています) には立ち入りませんが、たとえ話で説明しておきましょう。
ヒストグラムが木製のブロックで出来ているとします。
次に、その上に煮たスパゲッティを一本載せるとします。
ブロック上にだらりと掛かるスパゲッティの形が密度曲線の形です。
ヒストグラムほど詳細ではなくなりますが、特に山や歪度など、分布の形を素早く拾い出すのは容易になります。

```{r}
#| fig-alt: |
#|   ペンギンの体重の密度プロット。分布の山は一つで、右に歪んでおり、
#|   範囲は約2500から6500グラムに広がる。

ggplot(penguins, aes(x = body_mass_g)) +
  geom_density()
```

### 練習問題

1.  `penguins`の`species`で棒グラフを描け。`s`
    `pecies`をy軸に割り当てること。
    本文のプロットと比べて、どう違っていますか？

2.  以下の2つのプロットはどう違っていますか？
    `color`と`fill`、どちらのエステティック属性が、棒グラフの色を変えるのに適していますか？

    ```{r}
    #| eval: false

    ggplot(penguins, aes(x = species)) +
      geom_bar(color = "red")

    ggplot(penguins, aes(x = species)) +
      geom_bar(fill = "red")
    ```

3.  `geom_histogram()`の`bins`引数の役目は？

4.  tidyverseパッケージをロードすると利用可能になる`diamonds`データセットで、`carat`変数のヒストグラムを描きなさい。
    biwidthをいくつか変えて試しなさい。
    どのbinwidthが最も興味深いパターンを明らかにしましたか？

## 関係の可視化

関係を可視化するには、少なくとも2つの変数をプロットのエステティック属性にマップする必要があります。
以下のセクションでは、2つ以上の変数間の関係を可視化するのに通常用いられるプロットとそれらを作成のためのgeomを学びます。

### 数値変数とカテゴリ変数の間の関係

数値変数とカテゴリ変数の間の関係を可視化するには、複数のボックスプロットが横並びになるプロットを使えます。
**ボックスプロット**は、分布を表す百分位 (下から数えて何番目) の位置を、簡略化して示すタイプの可視化です。
外れ値の可能性があるものを特定するのにも役立ちます。
@fig-eda-boxplot に示したように、各ボックスプロットは以下のように構成されています。

-   箱は、四分位範囲 (IQR) と呼ばれる、分布の25百分位から75百分位までの、中間にあるデータ半分の範囲を示す。
    箱の中の一本の線は、分布の50百分位、つまり中央値を示す。
    これら3本の線から、分布の広がり具合と、分布が中央値から対称か、一方に歪んだ非対称か、感覚的につかめる。

-   点は、箱の各端からIQRの1.5倍よりも離れた観測を表す。
    これらの外れ点は通常でないので、1点ずつプロットされる。

-   箱の各端から先に伸びる線 (ウィスカーという) は、分布の外れ点ではない中で一番離れた点まで届く。

```{r}
#| label: fig-eda-boxplot
#| echo: false
#| fig-cap: |
#|   ボックスプロットの構成を示すダイアグラム。
#| fig-alt: |
#|   上記のステップに従った、ボックスプロットの構成を示すダイアグラム。

knitr::include_graphics("images/EDA-boxplot.png")
```

種族ごとの体重の分布を`geom_boxplot()`を使って見てみましょう。

```{r}
#| warning: false
#| fig-alt: |
#|   Adelie、Chinstrap、Gentooペンギンの体重分布のボックスプロット
#|   が横並び。AdelieとChinstrapペンギンの体重分布は、3750グラム辺りの
#|   中央値から対称に見える。Gentooペンギンの体重の中央値は5000グラム
#|   辺りとずっと高く、体重分布はいくらか右側に歪んで見える。

ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```

`geom_density()`を使って、密度プロットを描くこともできます。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの種族ごとの体重の密度プロット。
#|   各種族 (Adelie、Chinstrap、Gentoo) は、密度曲線の色を変えて表している。 

ggplot(penguins, aes(x = body_mass_g, color = species)) +
  geom_density(linewidth = 0.75)
```

背景に対して線がもう少し目立つよう、線の太さを`linewidth`引数を使って変えてもいます。

さらに、`species`を`color`と`fill`の両方のエステティック属性にマップして、`alpha`エステティック属性を設定して密度曲線が覆う領域に透明度を加えています。
`alpha`は0 (完全に透明) から1 (完全に不透明) までの値を取ります。
以下のプロットでは0.5に*設定*しています。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの種族ごとの体重の密度プロット。
#|   各種族 (Adelie、Chinstrap、Gentoo) は、密度曲線の色を変えて表している。
#|   密度曲線が覆う領域も同色で埋めて、いくらか透明度を加えている。

ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(alpha = 0.5)
```

ここでの用語を確認しておきましょう。

-   エステティック属性が変数の値に応じて変わるように可視化したいのなら、変数をエステティック属性に*マップ*する。
-   そうでなければ、エステティック属性の値を*設定*する。

### 2つのカテゴリ変数間の関係

2つのカテゴリ変数間の関係を可視化するには、積み上げ棒グラフが使えます。
例えば、以下の2つの積み上げ棒グラフは両方とも、`island`と`species`間の関係を表しており、特に各島内での`species`の分布を可視化しています。

第1のプロットは各島でのペンギンの種族ごとの頻度を示しています。
頻度のプロットなので、各島にAdeliesペンギンは同じくらいの数居ることが分かります。
しかし、各島内での種族の構成比は感覚としてつかめません。

```{r}
#| fig-alt: |
#|   島 (Biscoe, Dream, and Torgersen) ごとのペンギン種族の棒グラフ。
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar()
```

第2のプロットは、geomの中で`position = "fill"`と設定することで作成した相対頻度プロットで、種族の分布を各島で比べるのに適しています。各
島に住むペンギン数が異なることの影響を受けないからです。
このプロットを使うと、Gentooペンギンは全員がBiscoe島に住んでおり、その島のペンギンの約75％を占めること、Chinstrapペンギンは全員がDream島に住んでおり、その島の約50％を占めること、Adelieペンギンは3つの島全てに住んでおり、Torgersen島では100％を占めること、が分かります。

```{r}
#| fig-alt: |
#|   島 (Biscoe, Dream, and Torgersen) ごとのペンギン種族の棒グラフ。
#|   棒の高さが同じになるよう引き伸ばされ、相対頻度プロットになっている。

ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar(position = "fill")
```

これらの棒グラフを作成するには、棒を分ける変数を`x`エステティック属性に、棒の色を変える変数を`fill`エステティック属性にマップします。

### 2つの数値変数間の関係

ここまでで、2つの数値変数間の関係可視化するための、(`geom_point()`で作成する) 散布図と (`geom_smooth()`で作成する) 滑らかな曲線を学習しました。
2つの数値変数間の関係を可視化するには、散布図がおそらく最も利用されることが多いプロットでしょう。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重と翼の長さの散布図。プロットはこれら2変数間の
#|   正で、リニアで、まずまず強い関係を示している。

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

### 3つ以上の変数間の関係

@sec-adding-aesthetics-layers で見たように、さらなる変数を追加のエステティック属性にマップすることで、プロットに取り込むことができます。
例えば、以下の散布図では、点の色で種族を、点の形で島を表しています。

```{r}
#| warning: false
#| fig-alt: |
#|   ペンギンの体重と翼の長さの散布図。プロットはこれら2変数間の
#|   正で、リニアで、まずまず強い関係を示している。
#|   点の色はペンギンの種族を表し、点の形は島 (丸はBiscoe島、三角はDream島、
#|   四角はTorgersen島) を表す。
#|   ごたごたしたプロットで、点の形を区別するのが困難。

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))
```

しかし、プロットにあまりに多くのエステティック・マッピングを追加すると、ごたごたして、意味をくみ取るのが難しくなります。
カテゴリ変数には特に適していますが、別のやり方はプロットを、データのサブセットをそれぞれ表示するサブプロット、**ファセット**に分けることです。

プロットを1つの変数でファセットするには、`facet_wrap()`を使います。
`facet_wrap()`の The first argument of `facet_wrap()` is a formula[^data-visualize-3], which you create with `~` followed by a variable name.
The variable that you pass to `facet_wrap()` should be categorical.

[^data-visualize-3]: Here "formula" is the name of the thing created by `~`, not a synonym for "equation".

```{r}
#| warning: false
#| fig-width: 8
#| fig-asp: 0.33
#| fig-alt: |
#|   ペンギンの体重と翼の長さの散布図。
#|   点の形と色は種族を表す。
#|   各島のペンギンは別々のファセットにある。
#|   各ファセット内では、体重と翼の長さの関係は、
#|   正で、リニアで、まずまず強い。

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

@sec-layers で、変数の分布やそれらの間の関係を可視化する、その他多くのgeomsを学習します。

### 練習問題

1.  ggplot2パッケージに同梱されている`mpg`データフレームは、米国環境保護庁が`r mpg |> distinct(model) |> nrow()`個の自動車モデルについて収集した、`r nrow(mpg)`個の観測から成る。
    `mpg`内の変数のどれがカテゴリ変数？
    どれが数値変数？
    (ヒント：`?mpg`と打ち込むとデータセットのドキュメントが読める。) `mpg`と打ち込んだら、この情報はどう見えるか？

2.  `mpg`データフレームを使って、`hwy`対`displ`の散布図を描きなさい。
    次に、第3の数値変数を`color`にマップしなさい。次
    は`size`に、次は`color`と`size`の両方に、次に`shape`にマップしなさい。
    これらのエステティック属性は、カテゴリ変数がマップされた場合と数値変数がマップされた場合とで、どのように違った振る舞いをしますか？

3.  `hwy`対`displ`の散布図で、第3の変数を`linewidth`にマップしたら、どうなりますか？

4.  同じ変数を複数のエステティック属性にマップしたら、どうなりますか？

5.  `bill_depth_mm`対`bill_length_mm`の散布図を描いて、`species`ごとに点の色を変えなさい。
    種族ごとに色分けを加えたことで、この2変数間の関係の何が見えるか？
    `species`ごとにファセットしたら、どうか？

6.  以下のグラフで、凡例が2つ別々になったのはなぜか？
    凡例を1つに合わせるには、どう修正するか？

    ```{r}
    #| warning: false
    #| fig-show: hide

    ggplot(
      data = penguins,
      mapping = aes(
        x = bill_length_mm, y = bill_depth_mm, 
        color = species, shape = species
      )
    ) +
      geom_point() +
      labs(color = "Species")
    ```

7.  以下2つの積み上げ棒グラフを描きなさい。
    1つ目のグラフから答えられる質問は？
    2つ目のグラフから答えられる質問は？

    ```{r}
    #| fig-show: hide

    ggplot(penguins, aes(x = island, fill = species)) +
      geom_bar(position = "fill")
    ggplot(penguins, aes(x = species, fill = island)) +
      geom_bar(position = "fill")
    ```

## プロットの保存 {#sec-ggsave}

プロットが出来上がったたら、Rの外に持ち出して、他でも利用できるイメージとして保存したくなるかもしれません。
それが、`ggsave()`の仕事です。以
下のようにすれば、最も新しく描いたプロットをディスクに保存してくれます。

```{r}
#| fig-show: hide
#| warning: false

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
ggsave(filename = "penguin-plot.png")
```

```{r}
#| include: false

file.remove("penguin-plot.png")
```

これで、ワーキング・ディレクトリにプロットが保存されます。ワ
ーキング・ディレクトリという概念については、@sec-workflow-scripts-projects でさらに学習します。

`width`と`height`を指定しなければ、現在画面に出ているプロットのものが使用されます。
再現可能なコードにするためには、それらを指定したいでしょう。
`ggsave()`については、ドキュメントからさらに学習できます。

しかし、一般的には、最終レポートはQuartoを使ってまとめることをお薦めします。再
現可能な著作システムで、コードと文章を交互に並べて、著作の中に自動的にプロットを含めることができます。
Quartoについては、@sec-quarto でさらに学習します。

### 練習問題

1.  以下のコードを実行しなさい。
    2つのプロットのうち、`mpg-plot.png`として保存されたのはどちら？
    その理由は？

    ```{r}
    #| eval: false

    ggplot(mpg, aes(x = class)) +
      geom_bar()
    ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave("mpg-plot.png")
    ```

2.  PNGではなくPDFとしてプロットを保存するには、コードのどこを変更する必要がある？
    `ggsave()`で保存できるイメージ・ファイルの種類を知るにはどうする？

## よくある問題

Rコードを実行しはじめた当初は、様々な問題に行き当たりがちです。
悩まないで。誰
にでも起こることです。
著者は皆、もう何年もRコードを書いていますが、それでも、一発では動かないコードを毎日書いています！

実行したコードと本書のコードを注意深く比べるところからはじめましょう。
Rという言語はとても小うるさく、文字を入れ間違えると台無しになります。
`(`と`)`が全てマッチしていること、`"`ともう一つの`"`が全てペアになっていることを確認しましょう。
コードを実行したのに、何も起こらないこともあります。
コンソールの左端をチェックします。`+`
となっていたら、Rは命令文が未完と考え、それを完成させる次の入力を待っている、ということです。
この場合、ESCAPEを押して、現在の命令を放棄し、はじめからやり直すのが一番簡単です。

ggplot2で描画する際よくある問題は、`+`を間違った場所に置くことです。行
の最後に置くのが正しく、最初に置くのは間違いです。
言い換えると、以下のようなコードを書いてしまわないことです。

```{r}
#| eval: false

ggplot(data = mpg) 
+ geom_point(mapping = aes(x = displ, y = hwy))
```

まだ行き詰まっているなら、ヘルプを試しましょう。
どんなR関数も、コンソールに`?function_name`と打ち込むか、RStudioで関数名をハイライトしてからF1を押せば、ヘルプが得られます。
ヘルプがたいした助けになりそうになくても、悩まないことです。そ
の場合、ヘルプの最後の方にあるexamplesまで飛んで、やろうとしていることにマッチするコードを探しましょう。

それでも助けにならなければ、エラー・メッセージを注意深く読みましょう。
そこに答えが埋もれていることがあります！
ただ、たとえ答えがエラー・メッセージにあったとしても、Rの初心者には意味が分からないかもしれません。
もう一つ偉大な道具はGoogleです。エ
ラー・メッセージを検索してみることです。同
じ問題に悩んで、オンラインでヘルプを得た人がこれまでにいた可能性が高いのですから。

## まとめ

この章では、ggplot2を使ったデータの可視化の基礎を学びました。
ggplot2の土台である基本的な考え方からはじめました。可
視化とは、データの変数を位置、色、サイズ、形などのエステティック属性にマップすることである、という考え方です。
次に、レイヤーを重ねて、プロットの複雑さを増し、プレゼンとして改良することを学びました。
また、1つの変数の分布を可視化したり、2つ以上の変数間の関係を可視化したりするのによく用いられるプロットを、エステティック・マッピングを追加したり、ファセットを使って複数の小さなプロットに分割したりして作成することを学びました。

本書を通じて、繰り返し可視化を使います。そ
のたびに、必要なテクニックを新しく導入します。ま
た、@sec-layers から @sec-communication では、ggplot2を使った可視化により深く潜り込みます。

可視化の基礎を身に付けて、次章ではギアを変えて、実務的なワークフロー上の助言をいくつかします。
データサイエンスの道具を用いたワークフロー上の助言は、この部を通じて散らばらせています。そ
うすることが、より長いRコードを書くようになっても、整頓できていられる助けになるからです。
