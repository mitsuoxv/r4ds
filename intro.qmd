# はじめに {#sec-intro .unnumbered}

```{r}
#| echo: false

source("_common.R")
```

データサイエンスは、生のデータを理解、洞察、知識へと変換できる、わくわくする学科です。
"Rではじめるデータサイエンス"のゴールは、あなたがデータサイエンスを効率的に、再現可能な格好で、そしてその過程を楽しめる😃 よう、Rの最も重要な道具を学習することを助けることです。
本書の読後には、Rの最良な部分を使って、データサイエンスの多種多様の挑戦に取り組むための道具を身に付けていることでしょう。

## 本書で学ぶこと

データサイエンスは広大な領域であり、一冊の本を読んだだけでその全てが修得できるわけがありません。
本書が狙っているのは、必要となればもっと学べる資源を読者が見つけられるよう、最も重要な道具と十分な知識の堅牢な土台を与えることです。
典型的なデータサイエンスのプロジェクトは、以下のように複数の段階から成るモデルで表せます @fig-ds-diagram。

```{r}
#| label: fig-ds-diagram
#| echo: false
#| fig-cap: |
#|   In our model of the data science process, you start with data import
#|   and tidying. Next, you understand your data with an iterative cycle of
#|   transforming, visualizing, and modeling. You finish the process 
#|   by communicating your results to other humans.
#| fig-alt: |
#|   A diagram displaying the data science cycle: Import -> Tidy -> Understand 
#|   (which has the phases Transform -> Visualize -> Model in a cycle) -> 
#|   Communicate. Surrounding all of these is Communicate.
#| out.width: NULL

knitr::include_graphics("diagrams/data-science/base.png", dpi = 270)
```

最初に、自分が持っているデータをRに**読み込む**必要があります。
典型的には、ファイル、データベース、もしくは、ウェブに保存されているデータをアプリケーション・プログラミング・インターフェース (API) を通じて取り出し、Rにデータフレームとして持ち込む、ということです。
Rにデータを読み込めなければ、それについてデータサイエンスをすることなどできません！

ひとたびデータを読み込んだなら、そいつを**整頓**するのは良い考えです。
データを整頓するとは、データセットの持つ意味と保存方法が一致するよう、首尾一貫した様式で保存することです。
簡単に言えば、データが整頓されていれば、各列は変数に、各行は観測値になっています。
整頓されたデータが重要なのは、その首尾一貫した構造のおかげで、異なる関数ごとに正しい様式にしようとデータと格闘することなく、データについての質問に答えることに努力を集中できるからです。

ひとたびデータを整頓すれば、次のステップは普通それを**変換**することです。
変換とは、（一つの都市の全員とか、昨年の全てのデータとか）興味のある観測値に絞り込む、（距離と時間から速度を計算するなど）既存の変数から関数を使って新しい変数を作り出す、（カウントや平均など）一連の要約統計値を計算する、などのことです。
整頓と変換を合わせて**手懐け**と呼びます。と
いうのも、データを仕事を進めるのに自然な様式にすることは、動物を手懐けるに等しい闘いに感じられるのがしばしばだからです！

ひとたび必要な変数を含む整頓されたデータを得れば、知識を創造する主に二つのエンジンが使えます。可
視化とモデルです。
これらの強みと弱みは補完関係にあるので、実際のデータ分析ではこれらの間を何度も行ったり来たりすることになります。

**可視化**は根本的に人向けの活動です。
良い可視化では、予想していなかった物事が見えたり、データについて新しい質問を思い付いたりします。
さらに、間違った質問をしていたとか、異なるデータを集める必要があるとか、気付かされるかもしれません。
可視化はあなたを驚かせることができますが、人が見て解釈しないといけないので、観測値がとても多いとあまり上手く行きません。

**モデル**は可視化を補完する道具です。
ひとたび十分に精密な質問を持ったなら、モデルを使って答えることができます。
モデルは根本的に数学的、あるいは、計算上の道具なので、観測値が多くなっても一般的には上手く行きます。
上手く行かないときでも、追加で頭脳を買うよりもコンピューターを買った方が通常安上がりです！
ただし、全てのモデルには前提が置かれています。そ
の性質ゆえ、モデルは自身の前提を疑えません。
モデルはあなたを驚かせることが根本的にできない、ということです。

データサイエンスの最後のステップは**コミュニケーション**で、どんなデータ分析プロジェクトでも絶対的に大事な部分です。
どれだけモデルや可視化を通してデータを理解できたとしても、あなたの得た結果を他者に伝えることができなければ、何の意味もありません。

これら全ての道具を取り囲んでいるのが**プログラミング**です。
プログラミングは、データサイエンスのプロジェクトのほぼ全ての部分で使う分野横断的な道具です。
データサイエンティストとして成功するのに、プロのプログラマーになる必要はありませんが、より良いプログラマーになれば、よくある業務を自動化したり、新しい問題をより容易に解けたりできるので、プログラミングについてさらに学習することは割の良い投資です。

本書で学ぶ道具は、データサイエンスの全てのプロジェクトで使うことになりますが、ほとんどのプロジェクトではそれだけでは足りません。
大まかに 80/20 ルールが働いています。本
書で学ぶ道具を使って全てのプロジェクトの約80％はこなせますが、残りの20％に取り組むには他の道具が必要になります。
本書を通じて、さらに学習できる資源を指し示すことにします。

## 本書の構成

データサイエンスの道具について、ここまでは、大まかに分析で使う順（と言っても、当然何度も行ったり来たりするのですが）に描写してきました。
しかし、最初にデータの読み込みと整頓を学習するのは、経験上、最適ではありません。と
いうのも、80％の時間は決まりきった作業で退屈、残り20％の時間は訳のわからない作業で不満がたまるからです。
新しい主題を学びはじめる場所としてふさわしくない！
替わりに、読み込みと整頓が済んだデータの可視化と変換からはじめます。こ
うすることで、いざ自分のデータを読み込んで整頓する際に、動機を高く保てます。苦
痛が努力に見合うものだと知っているからです。

各章内で、首尾一貫したパターンに固執するよう努めました。動
機付けになる例でより大きな絵が見えるようにはじめて、それから詳細に潜っていきます。
本書の各セクションには、学んだばかりのことを練習できるよう演習を置きました。
演習はスキップしたくなるかもしれませんが、実際の問題で練習することよりも優れた方法はありません。

## 何を学ばないか

本書がカバーしていない重要トピックはいくつもあります。
あなたが可能な限り素早く立ち上がって走って行けるよう、本質的なことだけに無慈悲なほどにフォーカスし続けることが重要だと信じています。
本書で全ての重要トピックをカバーすることはできない、ということです。

### モデル

モデルはデータサイエンスにとってとても重要ですが、大きなトピックでもあり、残念ながら、それに見合う扱いでカバーするには本書にはスペースが足りません。
モデルについてさらに学ぶには、われわれの同僚のMax Kuhn と Julia Silgeによる著作 [Tidy Modeling with R](https://www.tmwr.org) をお薦めします。
tidymodels パッケージ（その名から推測できるように、本書で使用する tidyverse パッケージと多くの慣行を共有しています）を教えてくれます。

### ビッグデータ

本書は、主にメモリーに置ける程度の小さいデータセットに、誇りを持ってフォーカスしています。
小さいデータの経験がなければ、ビッグデータに取り組むことなどできないのですから、小さいデータからはじめるのが正しい。
本書の大部分を通して学ぶ道具は、数百メガバイトのデータを容易に扱えますし、数ギガバイトのデータでも、少々注意すれば、典型的には扱えます。
また、ビッグデータを保存するのに多く用いられているデータベースや parquet ファイルからデータを取り出すやり方も示します。
データセットの全体で作業する必要は必ずしもないのです。興
味を持った質問に答えるのに必要なのはサブセットやサブサンプルだけなので、全体を扱えないことは問題ではないのです。

（例えば、10--100 GBの）より大きなデータでいつも作業しているなら、[data.table](https://github.com/Rdatatable/data.table)についてさらに学習することを薦めます。
本書で教えていないのは、tidyverse とインターフェースが異なり、いくつか別の慣行を学ばなければならないからです。
しかし、その速さは驚くべきもので、大きなデータを扱っているなら、時間を割いて学習することは割に合います。

### Python, Julia, and friends

In this book, you won't learn anything about Python, Julia, or any other programming language useful for data science.
This isn't because we think these tools are bad.
They're not!
And in practice, most data science teams use a mix of languages, often at least R and Python.
But we strongly believe that it's best to master one tool at a time, and R is a great place to start.

## Prerequisites

We've made a few assumptions about what you already know to get the most out of this book.
You should be generally numerically literate, and it's helpful if you have some basic programming experience already.
If you've never programmed before, you might find [Hands on Programming with R](https://rstudio-education.github.io/hopr/) by Garrett to be a valuable adjunct to this book.

You need four things to run the code in this book: R, RStudio, a collection of R packages called the **tidyverse**, and a handful of other packages.
Packages are the fundamental units of reproducible R code.
They include reusable functions, documentation that describes how to use them, and sample data.

### R

To download R, go to CRAN, the **c**omprehensive **R** **a**rchive **n**etwork, <https://cloud.r-project.org>.
A new major version of R comes out once a year, and there are 2-3 minor releases each year.
It's a good idea to update regularly.
Upgrading can be a bit of a hassle, especially for major versions that require you to re-install all your packages, but putting it off only makes it worse.
We recommend R 4.2.0 or later for this book.

### RStudio

RStudio is an integrated development environment, or IDE, for R programming, which you can download from <https://posit.co/download/rstudio-desktop/>.
RStudio is updated a couple of times a year, and it will automatically let you know when a new version is out, so there's no need to check back.
It's a good idea to upgrade regularly to take advantage of the latest and greatest features.
For this book, make sure you have at least RStudio 2022.02.0.

When you start RStudio, @fig-rstudio-console, you'll see two key regions in the interface: the console pane and the output pane.
For now, all you need to know is that you type the R code in the console pane and press enter to run it.
You'll learn more as we go along![^intro-1]

[^intro-1]: If you'd like a comprehensive overview of all of RStudio's features, see the RStudio User Guide at <https://docs.posit.co/ide/user>.

```{r}
#| label: fig-rstudio-console
#| echo: false
#| out-width: ~
#| fig-cap: |
#|   The RStudio IDE has two key regions: type R code in the console pane
#|   on the left, and look for plots in the output pane on the right.
#| fig-alt: |
#|   The RStudio IDE with the panes Console and Output highlighted.
knitr::include_graphics("diagrams/rstudio/console.png", dpi = 270)
```

### The tidyverse

You'll also need to install some R packages.
An R **package** is a collection of functions, data, and documentation that extends the capabilities of base R.
Using packages is key to the successful use of R.
The majority of the packages that you will learn in this book are part of the so-called tidyverse.
All packages in the tidyverse share a common philosophy of data and R programming and are designed to work together.

You can install the complete tidyverse with a single line of code:

```{r}
#| eval: false

install.packages("tidyverse")
```

On your computer, type that line of code in the console, and then press enter to run it.
R will download the packages from CRAN and install them on your computer.

You will not be able to use the functions, objects, or help files in a package until you load it with `library()`.
Once you have installed a package, you can load it using the `library()` function:

```{r}
library(tidyverse)
```

This tells you that tidyverse loads nine packages: dplyr, forcats, ggplot2, lubridate, purrr, readr, stringr, tibble, tidyr.
These are considered the **core** of the tidyverse because you'll use them in almost every analysis.

Packages in the tidyverse change fairly frequently.
You can see if updates are available by running `tidyverse_update()`.

### Other packages

There are many other excellent packages that are not part of the tidyverse because they solve problems in a different domain or are designed with a different set of underlying principles.
This doesn't make them better or worse; it just makes them different.
In other words, the complement to the tidyverse is not the messyverse but many other universes of interrelated packages.
As you tackle more data science projects with R, you'll learn new packages and new ways of thinking about data.

We'll use many packages from outside the tidyverse in this book.
For example, we'll use the following packages because they provide interesting datasets for us to work with in the process of learning R:

```{r}
#| eval: false

install.packages(
  c("arrow", "babynames", "curl", "duckdb", "gapminder", 
    "ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman", 
    "leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins", 
    "repurrrsive", "tidymodels", "writexl")
  )
```

We'll also use a selection of other packages for one off examples.
You don't need to install them now, just remember that whenever you see an error like this:

```{r}
#| eval: false

library(ggrepel)
#> Error in library(ggrepel) : there is no package called ‘ggrepel’
```

You need to run `install.packages("ggrepel")` to install the package.

## Running R code

The previous section showed you several examples of running R code.
The code in the book looks like this:

```{r}
#| eval: true
1 + 2
```

If you run the same code in your local console, it will look like this:

```         
> 1 + 2
[1] 3
```

There are two main differences.
In your console, you type after the `>`, called the **prompt**; we don't show the prompt in the book.
In the book, the output is commented out with `#>`; in your console, it appears directly after your code.
These two differences mean that if you're working with an electronic version of the book, you can easily copy code out of the book and paste it into the console.

Throughout the book, we use a consistent set of conventions to refer to code:

-   Functions are displayed in a code font and followed by parentheses, like `sum()` or `mean()`.

-   Other R objects (such as data or function arguments) are in a code font, without parentheses, like `flights` or `x`.

-   Sometimes, to make it clear which package an object comes from, we'll use the package name followed by two colons, like `dplyr::mutate()` or `nycflights13::flights`.
    This is also valid R code.

## Acknowledgments

This book isn't just the product of Hadley, Mine, and Garrett but is the result of many conversations (in person and online) that we've had with many people in the R community.
We're incredibly grateful for all the conversations we've had with y'all; thank you so much!

```{r}
#| eval: false
#| echo: false

library(tidyverse)
contribs_all_json <- gh::gh("/repos/:owner/:repo/contributors",
  owner = "hadley",
  repo = "r4ds",
  .limit = Inf
)
contribs_all <- tibble(
  login = contribs_all_json |> map_chr("login"),
  n = contribs_all_json |> map_int("contributions")
)

contribs_old <- read_csv("contributors.csv", col_types = list())
contribs_new <- contribs_all |> anti_join(contribs_old, by = "login")

# Get info for new contributors
needed_json <- map(
  contribs_new$login, 
  ~ gh::gh("/users/:username", username = .x),
  .progress = TRUE
)
info_new <- tibble(
  login = contribs_new$login,
  name = map_chr(needed_json, "name", .default = NA),
  blog = map_chr(needed_json, "blog", .default = NA)
)
info_old <- contribs_old |> select(login, name, blog)
info_all <- bind_rows(info_old, info_new)

contribs_all <- contribs_all |> 
  left_join(info_all, by = "login") |> 
  mutate(login_lowercase = str_to_lower(login)) |>
  arrange(login_lowercase) |>
  select(-login_lowercase)
write_csv(contribs_all, "contributors.csv")
```

```{r}
#| results: asis
#| echo: false
#| message: false

library(dplyr)
contributors <- readr::read_csv("contributors.csv")
contributors <- contributors |> 
  filter(!login %in% c("hadley", "garrettgman", "mine-cetinkaya-rundel")) |> 
  mutate(
    login = paste0("\\@", login),
    desc = ifelse(is.na(name), login, paste0(name, " (", login, ")"))
  )

cat("This book was written in the open, and many people contributed via pull requests. A special thanks to all ",nrow(contributors), " of you who contributed improvements via GitHub pull requests (in alphabetical order by username): ", sep = "")
cat(paste0(contributors$desc, collapse = ", "))
cat(".\n")
```

## Colophon

An online version of this book is available at <https://r4ds.hadley.nz>.
It will continue to evolve in between reprints of the physical book.
The source of the book is available at <https://github.com/hadley/r4ds>.
The book is powered by [Quarto](https://quarto.org), which makes it easy to write books that combine text and executable code.

```{r}
#| eval: false
#| echo: false
#| results: asis

pkgs <- sessioninfo::package_info(
  tidyverse:::tidyverse_packages(),
  dependencies = FALSE
)
df <- tibble(
  package = pkgs$package,
  version = pkgs$ondiskversion,
  source = gsub("@", "\\\\@", pkgs$source)
)
knitr::kable(df, format = "markdown")
```

```{r}
#| include: false

cli:::ruler()
```
