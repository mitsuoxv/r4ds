# ワークフロー：ヘルプを得る {#sec-workflow-getting-help}

```{r}
#| echo: false

source("_common.R")
```

本書は孤島ではありません。そ
こだけあたればRを修得できるような単一の資源などありません。
本書に記述されているテクニックを自分のデータに当てはめはじめるとすぐに、本書には答えがない質問を見出すでしょう。
このセクションでは、ヘルプを得る方法や、学習を続けるのを助ける方法について、ヒントをいくつか述べます。

## グーグル検索はあなたの友

手詰まりになったら、まずグーグル検索です。
通常、検索文に"R"を追加しておけば、意味のある結果に絞り込めます。そ
れでも、役に立たなければ、R特有の結果がウェブ上にないということです。
追加的に、"tidyverse"や"ggplot2"といったパッケージ名を加えると、もっと馴染みのあるコードに結果を絞り込む助けになります。例
えば、"how to make a boxplot in R"よりも、"how to make a boxplot in R with ggplot2"とします。
エラーメッセージについて、グーグル検索は特に有益です。
エラーメッセージが出て来たが、意味が分からない、というときは、グーグル検索してみましょう！
誰か他の人が過去に混乱していたはずで、ウェブ上のどこかにヘルプがあるでしょう。
(エラーメッセージが英語でない場合は、`Sys.setenv(LANGUAGE = "en")`を実行後、コードを再実行して、英語のエラーメッセージを得ましょう。英
語のエラーメッセージで検索した方がヘルプを見つけられる可能性が高いからです。)

グーグル検索では役に立たなかったときは、[Stack Overflow](https://stackoverflow.com)を試してみましょう。
Rを使う質問と回答に検索を絞るために`[R]`を含めて、既存の回答を時間をかけて検索することからはじめます。

## reprexの作成

検索では役立ちそうなものが見つからなかった場合、**reprex**を用意するのは実に良い考えです。r
eprexは**repr**oducible **ex**ampleの略称で、再現可能な最小例のことです。
良いreprexを準備できれば、他の人達があなたを助けるのが容易になりますし、その作成中に自分で問題に気付くこともしばしばとなるでしょう。
reprexの作成には2つの部分があります。

-   第1に、コードを再現可能にすること。
    全てをコードに取り込むべし、ということ。つ
    まり、`library()`呼び出しを含めて、全ての必要なオブジェクトをコードで作る。
    確実にそうする一番簡単な方法は、reprexパッケージを使うこと。

-   第2に、最小にすること。
    あなたの問題と直接関係ない全てを剥ぎ取る。
    実際に直面しているものよりずっと小さく簡素なRオブジェクトを作ったり、組み込みデータを使ったりするのが通常。

大作業に聞こえますね！
実際、大作業になるかもしれませんが、割に合います。

-   80％の場合、優れたreprexを作ることで、問題の発生源が明らかになる。
    自己完結した最小例を書き上げることで、自分で質問の答えを見つけてしまう頻度の高さには驚くばかり。

-   残りの20％では、他の人があれこれやってみるのが容易になるよう、問題の本質を取り込めている。
    こうすることで、ヘルプを得られる可能性を高められる！

手作業でreprexを作成すると、たまたま何かを入れ忘れて、あなたのコードが他の人のコンピュータでは動かないことがよくあります。
reprexパッケージを使ってこの問題を回避しましょう。r
eprexパッケージはtidyverseの一部としてインストールされています。
以下のコードをクリップボードにコピー (もしくは、RStudio ServerやCloudなら、選択) するとします。

```{r}
#| eval: false

y <- 1:4
mean(y)
```

次に、`reprex()`を呼び出します。デ
フォルトの出力はGitHub用の形式です。

``` r
reprex::reprex()
```

きれいに作られたHTMLプレビューが、RStudioを使っていればRStudioのViewerに、そうでなければあなたのデフォルトのブラウザに、表示されます。
reprexは自動的にクリップボードにコピーされます。R
Studio ServerやCloudの場合、自分でコピーする必要があります。

````         
``` r
y <- 1:4
mean(y)
#> [1] 2.5
```
````

このテキストはマークダウンという特殊な形式になっており、StackOverflowやGithubといったサイトにペーストすると、自動的にコードに見えるようになります。
マークダウンはGitHubでは以下のように見えます。

```{r}
#| eval: false

y <- 1:4
mean(y)
#> [1] 2.5
```

誰もがすぐにコピー、ペーストして実行できます。

例を再現可能にするためには、必要なパッケージ、データ、コードの3つを含めなければなりません。

1.  **パッケージ**はスクリプトの最初にロードします。
    例が必要とするパッケージが何か、それで見やすくなります。
    各パッケージが最新バージョンになっているか確認する良い機会です。
    インストール、または、最後にアップデートした後に修正されたバグを見つけたのかもしれません。
    tidyverseのパッケージであれば、最も簡単な確認方法は`tidyverse_update()`を実行することです。

2.  **データ**を含める最も簡単な方法は、`dput()`を使って、それを再生するのに必要なRコードを生成することです。
    例えば、`mtcars`データセットをRの中で再生するには、以下のステップを踏みます。

    1.  Rで`dput(mtcars)`を実行、
    2.  出力をコピー、
    3.  reprexの中で`mtcars <-`と打ち込み、それからペースト。

    問題が依然発生するデータの最小サブセットを使うよう努めましょう。

3.  少々時間をかけて、他の人が読みやすい**コード**になっていることを確認します。

    -   スペースを活用していること、変数名が簡潔かつ分かりやすくなっていることを確認。

    -   コメントを使って、問題がどこにあるか示す。

    -   問題と関係ないものは全て削除するよう最大限努める。

    コードが短ければ短いほど、理解が容易になり、修正しやすくなります。

最後に、Rセッションを再起動、スクリプトをコピー、ペーストして、実際に再現可能な例になっていること

reprexを作ることは些事ではありません。上
手な、真に最小のreprexを作れるようになるには、いくらか練習が必要です。
それでも、コードを含めて質問することを学ぶこと、そのコードを再現可能にするのに時間を投資することは、Rを学習し、修得するにつれて割に合うことでしょう。

## 自分自身に投資する

また、問題が起こる前に、いくらか時間をかけて、自分で問題が解けるよう準備するべきです。
毎日Rを学習するのにいくらか時間を投資することは、長期的には十分に割に合います。
tidyverseチームが何をしているのかフォローする一つの方法は、[tidyverse blog](https://www.tidyverse.org/blog/)を読むことです。
より広くRコミュニティのフォローするには、[R Weekly](https://rweekly.org)を読むことをお薦めします。コ
ミュニティの努力で、Rコミュニティの最も興味深いニュースを毎週集めています。

## まとめ

本章で、本書の「ゲームの全体像」部分は終了です。
ここまで、データサイエンス過程の最も大切な部分である、可視化、変換、整理、読み込みを見てきました。
過程全ての全体的な視点が得られたので、これからは、小さな部分の詳細に入っていきます。

次の部は可視化で、グラフの文法、ggplot2を使ったデータ可視化により深く潜り、ここまでに学習した道具をどう使って、探索的データ分析を行うか、実演や伝達のためのプロットを作成するか、優れた実践を紹介します。
