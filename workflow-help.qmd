# ワークフロー：ヘルプを得る {#sec-workflow-getting-help}

```{r}
#| echo: false

source("_common.R")
```

本書は孤島ではありません。そ
こだけあたればRを修得できるような単一の資源などありません。
本書に記述されているテクニックを自分のデータに当てはめはじめるとすぐに、本書には答えがない質問を見出すでしょう。
このセクションでは、ヘルプを得る方法や、学習を続けるのを助ける方法について、ヒントをいくつか述べます。

## グーグル検索はあなたの友

手詰まりになったら、まずグーグル検索です。
通常、検索文に"R"を追加しておけば、意味のある結果に絞り込めます。そ
れでも、役に立たなければ、R特有の結果がウェブ上にないということです。
追加的に、"tidyverse"や"ggplot2"といったパッケージ名を加えると、もっと馴染みのあるコードに結果を絞り込む助けになります。例
えば、"how to make a boxplot in R"よりも、"how to make a boxplot in R with ggplot2"とします。
エラーメッセージについて、グーグル検索は特に有益です。
エラーメッセージが出て来たが、意味が分からない、というときは、グーグル検索してみましょう！
誰か他の人が過去に混乱していたはずで、ウェブ上のどこかにヘルプがあるでしょう。
(エラーメッセージが英語でない場合は、`Sys.setenv(LANGUAGE = "en")`を実行後、コードを再実行して、英語のエラーメッセージを得ましょう。英
語のエラーメッセージで検索した方がヘルプを見つけられる可能性が高いからです。)

グーグル検索では役に立たなかったときは、[Stack Overflow](https://stackoverflow.com)を試してみましょう。
Rを使う質問と回答に検索を絞るために`[R]`を含めて、既存の回答を時間をかけて検索することからはじめます。

## reprexの作成

検索では役立ちそうなものが見つからなかった場合、**reprex**を用意するのは実に良い考えです。r
eprexは**repr**oducible **ex**ampleの略称で、再現可能な最小例のことです。
良いreprexを準備できれば、他の人達があなたを助けるのが容易になりますし、その作成中に自分で問題に気付くこともしばしばとなるでしょう。
reprexの作成には2つの部分があります。

-   第1に、コードを再現可能にすること。
    全てをコードに取り込むべし、ということ。つ
    まり、`library()`呼び出しを含めて、全ての必要なオブジェクトをコードで作る。
    確実にそうする一番簡単な方法は、reprexパッケージを使うこと。

-   第2に、最小にすること。
    あなたの問題と直接関係ない全てを剥ぎ取る。
    実際に直面しているものよりずっと小さく簡素なRオブジェクトを作ったり、組み込みデータを使ったりするのが通常。

大作業に聞こえますね！
実際、大作業になるかもしれませんが、割に合います。

-   80％の場合、優れたreprexを作ることで、問題の発生源が明らかになる。
    自己完結した最小例を書き上げることで、自分で質問の答えを見つけてしまう頻度の高さには驚くばかり。

-   残りの20％では、他の人があれこれやってみるのが容易になるよう、問題の本質を取り込めている。
    こうすることで、ヘルプを得られる可能性を高められる！

手作業でreprexを作成すると、たまたま何かを入れ忘れて、あなたのコードが他の人のコンピュータでは動かないことがよくあります。
reprexパッケージを使ってこの問題を回避しましょう。r
eprexパッケージはtidyverseの一部としてインストールされています。
以下のコードをクリップボードにコピー (もしくは、RStudio ServerやCloudなら、選択) するとします。

```{r}
#| eval: false

y <- 1:4
mean(y)
```

次に、`reprex()`を呼び出します。デ
フォルトの出力はGitHub用の形式です。

``` r
reprex::reprex()
```

きれいに作られたHTMLプレビューが、RStudioを使っていればRStudioのViewerに、そうでなければあなたのデフォルトのブラウザに、表示されます。
reprexは自動的にクリップボードにコピーされます。R
Studio ServerやCloudの場合、自分でコピーする必要があります。

````         
``` r
y <- 1:4
mean(y)
#> [1] 2.5
```
````

このテキストはマークダウンという特殊な形式になっており、StackOverflowやGithubといったサイトにペーストすると、自動的にコードに見えるようになります。
マークダウンはGitHubでは以下のように見えます。

```{r}
#| eval: false

y <- 1:4
mean(y)
#> [1] 2.5
```

誰もがすぐにコピー、ペーストして実行できます。

例を再現可能にするためには、必要なパッケージ、データ、コードの3つを含めなければなりません。

1.  **パッケージ**はスクリプトの最初にロードすべし。例
    が必要とするパッケージが何か、それで見やすくなる。
    This is a good time to check that you're using the latest version of each package; you may have discovered a bug that's been fixed since you installed or last updated the package.
    For packages in the tidyverse, the easiest way to check is to run `tidyverse_update()`.

2.  The easiest way to include **data** is to use `dput()` to generate the R code needed to recreate it.
    For example, to recreate the `mtcars` dataset in R, perform the following steps:

    1.  Run `dput(mtcars)` in R
    2.  Copy the output
    3.  In reprex, type `mtcars <-`, then paste.

    Try to use the smallest subset of your data that still reveals the problem.

3.  Spend a little bit of time ensuring that your **code** is easy for others to read:

    -   Make sure you've used spaces and your variable names are concise yet informative.

    -   Use comments to indicate where your problem lies.

    -   Do your best to remove everything that is not related to the problem.

    The shorter your code is, the easier it is to understand and the easier it is to fix.

Finish by checking that you have actually made a reproducible example by starting a fresh R session and copying and pasting your script.

Creating reprexes is not trivial, and it will take some practice to learn to create good, truly minimal reprexes.
However, learning to ask questions that include the code, and investing the time to make it reproducible will continue to pay off as you learn and master R.

## Investing in yourself

You should also spend some time preparing yourself to solve problems before they occur.
Investing a little time in learning R each day will pay off handsomely in the long run.
One way is to follow what the tidyverse team is doing on the [tidyverse blog](https://www.tidyverse.org/blog/).
To keep up with the R community more broadly, we recommend reading [R Weekly](https://rweekly.org): it's a community effort to aggregate the most interesting news in the R community each week.

## Summary

This chapter concludes the Whole Game part of the book.
You've now seen the most important parts of the data science process: visualization, transformation, tidying and importing.
Now you've got a holistic view of the whole process, and we start to get into the details of small pieces.

The next part of the book, Visualize, does a deeper dive into the grammar of graphics and creating data visualizations with ggplot2, showcases how to use the tools you've learned so far to conduct exploratory data analysis, and introduces good practices for creating plots for communication.
